{
  "address": "0x166eD118F380dDFe1F4FD3ccc7D2C5CaeCf0AE96",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newNodeFee",
          "type": "uint256"
        }
      ],
      "name": "ChangedNodeFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newTreasury",
          "type": "address"
        }
      ],
      "name": "ChangedTreasuryAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "treasuryAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTreasuryFee",
          "type": "uint256"
        }
      ],
      "name": "ChangedTreasuryFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "recipients",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remainderForSeller",
          "type": "uint256"
        }
      ],
      "name": "CustomRoyaltiesSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum Resale_MarketPlace.OfferStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tradeid",
          "type": "uint256"
        }
      ],
      "name": "OfferStatusChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "offerId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "UpdatedOfferPrice",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "offerIndex",
          "type": "uint256"
        }
      ],
      "name": "buyResaleOffer",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "offerIndex",
          "type": "uint256"
        }
      ],
      "name": "cancelOffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_contractAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_nodeAddress",
          "type": "address"
        }
      ],
      "name": "createResaleOffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeDecimals",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllOnSale",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "sellerAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "enum Resale_MarketPlace.OfferStatus",
              "name": "tradeStatus",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "nodeAddress",
              "type": "address"
            }
          ],
          "internalType": "struct Resale_MarketPlace.Offer[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "offerIndex",
          "type": "uint256"
        }
      ],
      "name": "getOfferInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "sellerAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "enum Resale_MarketPlace.OfferStatus",
              "name": "tradeStatus",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "nodeAddress",
              "type": "address"
            }
          ],
          "internalType": "struct Resale_MarketPlace.Offer",
          "name": "selectedOffer",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTokenIdStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserOffers",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "sellerAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "enum Resale_MarketPlace.OfferStatus",
              "name": "tradeStatus",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "nodeAddress",
              "type": "address"
            }
          ],
          "internalType": "struct Resale_MarketPlace.Offer[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nodeFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_pause",
          "type": "bool"
        }
      ],
      "name": "pauseContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "percentages",
          "type": "uint256[]"
        }
      ],
      "name": "setCustomRoyalties",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newFee",
          "type": "uint256"
        }
      ],
      "name": "setNodeFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newTreasury",
          "type": "address"
        }
      ],
      "name": "setTreasuryAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newFee",
          "type": "uint256"
        }
      ],
      "name": "setTreasuryFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenOnSale",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_newDecimals",
          "type": "uint8"
        }
      ],
      "name": "updateFeeDecimals",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "offerIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "updateOffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc55325dfb7946c297b87835c6e123c89d06eb79ac708831a8fce076056804ada",
  "receipt": {
    "to": null,
    "from": "0xEC30759D0A3F3CE0A730920DC29d74e441f492C3",
    "contractAddress": "0x166eD118F380dDFe1F4FD3ccc7D2C5CaeCf0AE96",
    "transactionIndex": 5,
    "gasUsed": "2721089",
    "logsBloom": "0x
    "blockHash": "0x8816acb2500b3fdcbcccdb5d0d37e514cdaa923924c7f75bf8ee7c4f45bb17c9",
    "transactionHash": "0xc55325dfb7946c297b87835c6e123c89d06eb79ac708831a8fce076056804ada",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 21630907,
        "transactionHash": "0xc55325dfb7946c297b87835c6e123c89d06eb79ac708831a8fce076056804ada",
        "address": "0x166eD118F380dDFe1F4FD3ccc7D2C5CaeCf0AE96",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ec30759d0a3f3ce0a730920dc29d74e441f492c3",
          "0x000000000000000000000000ec30759d0a3f3ce0a730920dc29d74e441f492c3"
        ],
        "data": "0x",
        "logIndex": 25,
        "blockHash": "0x8816acb2500b3fdcbcccdb5d0d37e514cdaa923924c7f75bf8ee7c4f45bb17c9"
      }
    ],
    "blockNumber": 21630907,
    "cumulativeGasUsed": "4274812",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xEC30759D0A3F3CE0A730920DC29d74e441f492C3"
  ],
  "numDeployments": 1,
  "solcInputHash": "c078ac5cc7161541f626f68afe416e0c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newNodeFee\",\"type\":\"uint256\"}],\"name\":\"ChangedNodeFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"ChangedTreasuryAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasuryAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTreasuryFee\",\"type\":\"uint256\"}],\"name\":\"ChangedTreasuryFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"recipients\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainderForSeller\",\"type\":\"uint256\"}],\"name\":\"CustomRoyaltiesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Resale_MarketPlace.OfferStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tradeid\",\"type\":\"uint256\"}],\"name\":\"OfferStatusChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"UpdatedOfferPrice\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offerIndex\",\"type\":\"uint256\"}],\"name\":\"buyResaleOffer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offerIndex\",\"type\":\"uint256\"}],\"name\":\"cancelOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nodeAddress\",\"type\":\"address\"}],\"name\":\"createResaleOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDecimals\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllOnSale\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sellerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"enum Resale_MarketPlace.OfferStatus\",\"name\":\"tradeStatus\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"}],\"internalType\":\"struct Resale_MarketPlace.Offer[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offerIndex\",\"type\":\"uint256\"}],\"name\":\"getOfferInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sellerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"enum Resale_MarketPlace.OfferStatus\",\"name\":\"tradeStatus\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"}],\"internalType\":\"struct Resale_MarketPlace.Offer\",\"name\":\"selectedOffer\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenIdStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserOffers\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sellerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"enum Resale_MarketPlace.OfferStatus\",\"name\":\"tradeStatus\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"}],\"internalType\":\"struct Resale_MarketPlace.Offer[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nodeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_pause\",\"type\":\"bool\"}],\"name\":\"pauseContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"percentages\",\"type\":\"uint256[]\"}],\"name\":\"setCustomRoyalties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setNodeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newTreasury\",\"type\":\"address\"}],\"name\":\"setTreasuryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setTreasuryFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenOnSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_newDecimals\",\"type\":\"uint8\"}],\"name\":\"updateFeeDecimals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offerIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"updateOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"buyResaleOffer(uint256)\":{\"details\":\"If custom splits exist, it will execute it, if they don't it will try to use the 2981 standard\",\"params\":{\"offerIndex\":\"Index of the offer on the marketplace\"}},\"cancelOffer(uint256)\":{\"details\":\"This doesn't delete the entry, just marks it as CANCELLED\",\"params\":{\"offerIndex\":\"Index of the offer to be cancelled\"}},\"constructor\":{\"params\":{\"_treasury\":\"Address of the treasury\"}},\"createResaleOffer(uint256,uint256,address,address)\":{\"params\":{\"_contractAddress\":\"Address of the ERC721 contract\",\"_nodeAddress\":\"Address of the RAIR node that will receive the node fee\",\"_price\":\"Price for the NFT to be sold\",\"_tokenId\":\"Index of the NFT\"}},\"getAllOnSale()\":{\"details\":\"This is a view function that uses loops, do not use on any non-view function\",\"returns\":{\"_0\":\"An array of all open offers on the marketplace\"}},\"getOfferInfo(uint256)\":{\"params\":{\"offerIndex\":\"Index of the offer on the marketplace\"},\"returns\":{\"selectedOffer\":\"\\tInformation about the offer\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getTokenIdStatus(address,uint256)\":{\"params\":{\"contractAddress\":\"Address of the ERC721 contract\",\"tokenId\":\"Index of the NFT\"},\"returns\":{\"_0\":\"Boolean value, true if there is an open offer on the marketplace\"}},\"getUserOffers(address)\":{\"params\":{\"user\":\"Address of the seller\"},\"returns\":{\"_0\":\"An array of all offers made by a specific user\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"pauseContract(bool)\":{\"details\":\"Only prevents offer creation and executions, the other functions continue as normal\",\"params\":{\"_pause\":\"Boolean flag to pause (true) or resume (false) the contract\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"setCustomRoyalties(address,address[],uint256[])\":{\"details\":\"You can send empty arrays to unset the creator royalties!\",\"params\":{\"contractAddress\":\"Address of the ERC721 contract\",\"percentages\":\"Array of percentages (represented by integers)\",\"recipients\":\"Array of addresses where the royalties will be sent, they cannot be smart contracts\"}},\"setNodeFee(uint256)\":{\"params\":{\"_newFee\":\"New Fee\"}},\"setTreasuryAddress(address)\":{\"details\":\"If the treasury is a contract, make sure it has a receive function\",\"params\":{\"_newTreasury\":\"New treasury address\"}},\"setTreasuryFee(uint256)\":{\"params\":{\"_newFee\":\"New Fee\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"updateFeeDecimals(uint8)\":{\"details\":\"Automatically updates node and treasury feesSales made before the update will have a special bit of code on sale execution to handle this changeNew sales will be required to follow the new number of decimals\",\"params\":{\"_newDecimals\":\"New number of decimals\"}},\"updateOffer(uint256,uint256)\":{\"details\":\"Price is the only thing that can be updated on any offer\",\"params\":{\"newPrice\":\"New price for the offer\",\"offerIndex\":\"Index of the offer\"}},\"withdraw(uint256)\":{\"details\":\"There shouldn't be any funds stuck on the resale marketplace\",\"params\":{\"_amount\":\"Amount of funds to be withdrawn\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"buyResaleOffer(uint256)\":{\"notice\":\"Executes a sale, sending funds to any royalty recipients and transferring the token to the buyer\"},\"cancelOffer(uint256)\":{\"notice\":\"Cancels an offer on the marketplace\"},\"constructor\":{\"notice\":\"Constructor\"},\"createResaleOffer(uint256,uint256,address,address)\":{\"notice\":\"Creates a resale offer on the marketplace\"},\"getAllOnSale()\":{\"notice\":\"Returns all open offers on the marketplace\"},\"getOfferInfo(uint256)\":{\"notice\":\"Returns information about a specific offer\"},\"getTokenIdStatus(address,uint256)\":{\"notice\":\"Queries the marketplace to find if a token is on sale\"},\"getUserOffers(address)\":{\"notice\":\"Returns all offers made by an user\"},\"pauseContract(bool)\":{\"notice\":\"Pauses / Resumes sales on the contract\"},\"setCustomRoyalties(address,address[],uint256[])\":{\"notice\":\"Sets a custom array of royalties for the entire ERC721 contract\"},\"setNodeFee(uint256)\":{\"notice\":\"Sets the new fee that will be paid to RAIR nodes\"},\"setTreasuryAddress(address)\":{\"notice\":\"Updates the treasury address\"},\"setTreasuryFee(uint256)\":{\"notice\":\"Sets the new treasury fee\"},\"updateFeeDecimals(uint8)\":{\"notice\":\"Updates the precision decimals on percentages and fees\"},\"updateOffer(uint256,uint256)\":{\"notice\":\"Updates the price of an offer\"},\"withdraw(uint256)\":{\"notice\":\"Withdraws any funds stuck on the resale marketplace\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Marketplaces/MarketplaceResale.sol\":\"Resale_MarketPlace\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb4d87ee2ead4bd192b41c128f287d4b7f24b9e0cd740cc9b476881c461286007\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Marketplaces/MarketplaceResale.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"../Tokens/IERC2981.sol\\\";\\n\\ncontract Resale_MarketPlace is AccessControl {\\n\\t\\n\\t// Status of an offer\\n\\tenum OfferStatus{ OPEN, CLOSED, CANCELLED }\\n\\n\\t// Data structure for the offers\\n\\tstruct Offer {\\n\\t\\taddress sellerAddress;\\n\\t\\taddress contractAddress;\\n\\t\\tuint tokenId;\\n\\t\\tuint price;\\n\\t\\tOfferStatus tradeStatus;\\n\\t\\taddress nodeAddress;\\n\\t}\\n\\n\\t// Custom splits for an entire contract\\n\\tstruct ContractCustomSplits {\\n\\t\\taddress[] recipients;\\n\\t\\tuint[] percentages;\\n\\t\\tuint precisionDecimals;\\n\\t}\\n\\t// Event emitted whenever an offer is created, completed or cancelled\\n\\tevent OfferStatusChange(\\n\\t\\taddress operator,\\n\\t\\taddress tokenAddress,\\n\\t\\tuint tokenId,\\n\\t\\tuint price,\\n\\t\\tOfferStatus status,\\n\\t\\tuint tradeid\\n\\t);\\n\\n\\t// Emitted whenever an offer is updated with a new price\\n\\tevent UpdatedOfferPrice(\\n\\t\\tuint offerId,\\n\\t\\taddress contractAddress,\\n\\t\\tuint oldPrice,\\n\\t\\tuint newPrice\\n\\t);\\n\\n\\t// Emitted when the treasury address is updated\\n\\tevent ChangedTreasuryAddress(address newTreasury);\\n\\t\\t\\n\\t// Emitted whenever the treasury fee is updated, includes the current treasury address\\n\\tevent ChangedTreasuryFee(address treasuryAddress, uint newTreasuryFee);\\n\\t\\n\\t// Emitted whenever the node fee is updated\\n\\tevent ChangedNodeFee(uint newNodeFee);\\n\\n\\t// Emitted when custom splits are set/removed\\n\\tevent CustomRoyaltiesSet(address contractAddress, uint recipients, uint remainderForSeller);\\n\\n\\taddress public treasuryAddress;\\n\\tuint16 public feeDecimals = 3;\\n\\n\\t// The limit for this is 65535\\n\\tuint public nodeFee = 1000;\\n\\tuint public treasuryFee = 9000;\\n\\n\\tmapping(uint => Offer) private offers;\\n\\tmapping(address => ContractCustomSplits) private contractSplits;\\n\\n\\tmapping(address => mapping(uint => bool)) public tokenOnSale;\\n\\n\\tbool public paused = false;\\n\\n\\tuint private tradeCounter;\\n\\tuint private offerCounter;\\n\\n\\t/// @notice \\tEnsures the marketplace isn't paused\\n\\tmodifier isPaused() {\\n\\t\\trequire(paused == false, \\\"Resale Marketplace: Currently paused\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @notice \\tEnsures the offer being managed is open\\n\\t/// @param \\t\\tofferIndex \\t\\tIndex of the offer to manage\\n\\tmodifier OpenOffer(uint offerIndex) {\\n\\t\\trequire(offers[offerIndex].tradeStatus == OfferStatus.OPEN, \\\"Resale Marketplace: Offer is not available\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @notice     Makes sure the function can only be called by the creator of a RAIR contract\\n\\t/// @param      contractAddress    Address of the RAIR ERC721 contract\\n\\tmodifier OnlyTokenCreator(address contractAddress) {\\n\\t\\tIERC2981 itemToken = IERC2981(contractAddress);\\n\\t\\trequire(\\n\\t\\t\\titemToken.supportsInterface(type(IERC2981).interfaceId),\\n\\t\\t\\t\\\"Resale Marketplace: Only the EIP-2981 receiver can be recognized as the creator\\\"\\n\\t\\t);\\n\\t\\t(address creator,) = itemToken.royaltyInfo(0, 100000);\\n\\t\\trequire(contractAddress != address(0), \\\"Resale Marketplace: Invalid address specified\\\");\\n\\t\\trequire(\\n\\t\\t\\tcreator == msg.sender,\\n\\t\\t\\t\\\"Resale Marketplace: Only token creator can set custom royalties\\\"\\n\\t\\t);\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @notice \\tEnsures only the NFT's holder is able to manage the offer\\n\\t/// @param \\t\\tcontractAddress \\tAddress of the ERC721 contract\\n\\t/// @param \\t\\ttokenId \\t\\t\\tIndex of the NFT\\n\\tmodifier OnlyTokenHolder(address contractAddress, uint256 tokenId) {\\n\\t\\t_onlyTokenHolder(contractAddress, tokenId);\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @notice \\tEnsures the resale marketplace is approved to handle the NFT on behalf of the owner\\n\\t/// @param \\t\\tcontractAddress \\tAddress of the ERC721 contract\\n\\t/// @param \\t\\ttokenId \\t\\t\\tIndex of the NFT\\n\\tmodifier HasTransferApproval(address contractAddress, uint256 tokenId) {\\n\\t\\tIERC721 itemToken = IERC721(contractAddress);\\n\\t\\trequire(\\n\\t\\t\\tcontractAddress != address(0) &&\\n\\t\\t\\ttokenId >= 0,\\n\\t\\t\\t\\\"Resale Marketplace: Invalid data\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\titemToken.isApprovedForAll(itemToken.ownerOf(tokenId), address(this)) ||\\n\\t\\t\\titemToken.getApproved(tokenId) == address(this),\\n\\t\\t\\t\\\"Resale Marketplace: Marketplace is not approved\\\"\\n\\t\\t);\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @notice \\tConstructor\\n\\t/// @param \\t\\t_treasury \\t\\tAddress of the treasury\\n\\tconstructor(address _treasury) {\\n\\t\\ttreasuryAddress = _treasury;\\n\\t\\t_grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\t}\\n\\n\\t/// @notice Utility function to verify that the recipient of a custom splits ISN'T a contract\\n\\t/// @dev \\tThis isn't a foolproof function, a contract running code in it's constructor has a code size of 0\\n\\t/// @param \\taddr \\tAddress to verify\\n\\t/// @return bool that indicates if the address is a contract or not\\n\\tfunction isContract(address addr) internal view returns (bool) {\\n\\t\\tuint size;\\n\\t\\tassembly { size := extcodesize(addr) }\\n\\t\\treturn size > 0;\\n\\t}\\n\\n\\t/// @notice \\tEnsures only the NFT owner can manage the offer\\n\\t/// @param \\t\\tcontractAddress \\tAddress of the ERC721 contract\\n\\t/// @param \\t\\ttokenId \\t\\t\\tIndex of the NFT\\n\\tfunction _onlyTokenHolder(address contractAddress, uint tokenId) internal view {\\n\\t\\tIERC721 itemToken = IERC721(contractAddress);\\n\\t\\trequire(\\n\\t\\t\\titemToken.ownerOf(tokenId) == msg.sender,\\n\\t\\t\\t\\\"Resale Marketplace: Address does not own the token\\\"\\n\\t\\t);\\n\\t}\\n\\n\\t/// @notice \\tReturns information about a specific offer\\n\\t/// @param \\t\\tofferIndex \\t\\tIndex of the offer on the marketplace\\n\\t/// @return \\tselectedOffer \\tInformation about the offer\\n\\tfunction getOfferInfo(uint256 offerIndex) public view returns (Offer memory selectedOffer) {\\n\\t\\tselectedOffer = offers[offerIndex];\\n\\t}\\n\\n\\t/// @notice \\tSets a custom array of royalties for the entire ERC721 contract\\n\\t/// @dev \\t\\tYou can send empty arrays to unset the creator royalties!\\n\\t/// @param \\t\\tcontractAddress \\tAddress of the ERC721 contract\\n\\t/// @param \\t\\trecipients \\t\\t\\tArray of addresses where the royalties will be sent, they cannot be smart contracts\\n\\t/// @param \\t\\tpercentages \\t\\tArray of percentages (represented by integers)\\n\\tfunction setCustomRoyalties(\\n\\t\\taddress contractAddress,\\n\\t\\taddress[] calldata recipients,\\n\\t\\tuint256[] calldata percentages\\n\\t) external OnlyTokenCreator(contractAddress) {\\n\\t\\trequire(\\n\\t\\t\\trecipients.length == percentages.length,\\n\\t\\t\\t\\\"Resale Marketplace: Recipients and Percentages should have the same length\\\"\\n\\t\\t);\\n\\n\\t\\tuint256 total = 0;\\n\\t\\tfor (uint256 i = 0; i < recipients.length; i++) {\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tisContract(recipients[i]) == false,\\n\\t\\t\\t\\t\\\"Resale Marketplace: For security reasons we don't allow smart contracts to receive funds\\\"\\n\\t\\t\\t);\\n\\t\\t\\ttotal += percentages[i];\\n\\t\\t}\\n\\n\\t\\trequire(\\n\\t\\t\\ttotal < (100 * (10 ** feeDecimals)) - nodeFee - treasuryFee,\\n\\t\\t\\t\\\"Resale Marketplace: Royalties exceed the 100%\\\"\\n\\t\\t);\\n\\n\\t\\tContractCustomSplits storage splits = contractSplits[contractAddress];\\n\\n\\t\\tsplits.precisionDecimals = feeDecimals;\\n\\t\\tsplits.recipients = recipients;\\n\\t\\tsplits.percentages = percentages;\\n\\n\\t\\temit CustomRoyaltiesSet(\\n\\t\\t\\tcontractAddress,\\n\\t\\t\\trecipients.length,\\n\\t\\t\\t(100 * (10 ** feeDecimals)) - nodeFee - treasuryFee - total\\n\\t\\t);\\n\\t}\\n\\n\\t/// @notice \\tCreates a resale offer on the marketplace\\n\\t/// @param \\t\\t_tokenId \\t\\t\\tIndex of the NFT\\n\\t/// @param \\t\\t_price \\t\\t\\t\\tPrice for the NFT to be sold\\n\\t/// @param \\t\\t_contractAddress \\tAddress of the ERC721 contract\\n\\t/// @param \\t\\t_nodeAddress \\t\\tAddress of the RAIR node that will receive the node fee\\n\\tfunction createResaleOffer(\\n\\t\\tuint256 _tokenId,\\n\\t\\tuint256 _price,\\n\\t\\taddress _contractAddress,\\n\\t\\taddress _nodeAddress\\n\\t)\\n\\t\\texternal\\n\\t\\tHasTransferApproval(_contractAddress, _tokenId)\\n\\t\\tOnlyTokenHolder(_contractAddress, _tokenId)\\n\\t\\tisPaused\\n\\t{\\n\\t\\trequire(\\n\\t\\t\\tisContract(_nodeAddress) == false,\\n\\t\\t\\t\\\"Resale Marketplace: Node address cannot be a smart contract\\\"\\n\\t\\t);\\n\\t\\trequire(!isContract(msg.sender), 'Resale Marketplace: Cannot trust smart contracts as sellers');\\n\\t\\trequire(\\n\\t\\t\\ttokenOnSale[_contractAddress][_tokenId] == false,\\n\\t\\t\\t\\\"Resale Marketplace: Token is already on sale\\\"\\n\\t\\t);\\n\\n\\t\\toffers[tradeCounter] = Offer({\\n\\t\\t\\tsellerAddress: msg.sender,\\n\\t\\t\\tcontractAddress: _contractAddress,\\n\\t\\t\\ttokenId: _tokenId,\\n\\t\\t\\tprice: _price,\\n\\t\\t\\ttradeStatus: OfferStatus.OPEN,\\n\\t\\t\\tnodeAddress: _nodeAddress\\n\\t\\t});\\n\\n\\t\\ttradeCounter += 1;\\n\\t\\ttokenOnSale[_contractAddress][_tokenId] = true;\\n\\n\\t\\temit OfferStatusChange(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\t_contractAddress,\\n\\t\\t\\t_tokenId,\\n\\t\\t\\t_price,\\n\\t\\t\\tOfferStatus.OPEN,\\n\\t\\t\\ttradeCounter - 1\\n\\t\\t);\\n\\t}\\n\\n\\t/// @notice \\tExecutes a sale, sending funds to any royalty recipients and transferring the token to the buyer\\n\\t/// @dev \\t\\tIf custom splits exist, it will execute it, if they don't it will try to use the 2981 standard\\n\\t/// @param \\t\\tofferIndex \\t\\tIndex of the offer on the marketplace\\n\\tfunction buyResaleOffer(uint256 offerIndex) public payable OpenOffer(offerIndex) isPaused {\\n\\t\\tOffer memory selectedOffer = offers[offerIndex];\\n\\t\\trequire(\\n\\t\\t\\tmsg.sender != address(0) && msg.sender != selectedOffer.sellerAddress,\\n\\t\\t\\t\\\"Resale Marketplace: Invalid addresses\\\"\\n\\t\\t);\\n\\t\\trequire(!isContract(msg.sender), \\\"Resale Marketplace: Cannot trust smart contract as buyer\\\");\\n\\t\\trequire(msg.value >= selectedOffer.price, \\\"Insuficient Funds!\\\");\\n\\n\\t\\tuint totalPercentage = 100 * (10 ** feeDecimals);\\n\\n\\t\\t// Pay the buyer any excess they transferred\\n\\t\\tpayable(msg.sender).transfer(msg.value - selectedOffer.price);\\n\\n\\t\\tuint256 toRAIR = (selectedOffer.price * treasuryFee) / totalPercentage;\\n\\t\\t\\n\\t\\tpayable(selectedOffer.nodeAddress).transfer((selectedOffer.price * nodeFee) / totalPercentage);\\n\\t\\tpayable(treasuryAddress).transfer(toRAIR);\\n\\t\\t\\n\\t\\tuint totalSent = ((selectedOffer.price * nodeFee) / totalPercentage) + toRAIR;\\n\\n\\t\\tContractCustomSplits storage customSplits = contractSplits[selectedOffer.contractAddress];\\n\\t\\tif (customSplits.recipients.length > 0) {\\n\\t\\t\\tuint i = 0;\\n\\t\\t\\tif (customSplits.precisionDecimals != feeDecimals) {\\n\\t\\t\\t\\tfor (; i < customSplits.recipients.length; i++) {\\n\\t\\t\\t\\t\\tcustomSplits.percentages[i] = _updatePrecision(customSplits.percentages[i], customSplits.precisionDecimals, feeDecimals);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\ti = 0;\\n\\t\\t\\t}\\n\\t\\t\\tfor (; i < customSplits.recipients.length; i++) {\\n\\t\\t\\t\\tuint toReceiver = selectedOffer.price * customSplits.percentages[i] / totalPercentage;\\n\\t\\t\\t\\tpayable(customSplits.recipients[i]).transfer(toReceiver);\\n\\t\\t\\t\\ttotalSent += toReceiver;\\n\\t\\t\\t}\\n\\t\\t} else if (IERC2981(selectedOffer.contractAddress).supportsInterface(type(IERC2981).interfaceId)) {\\n\\t\\t\\t(address creator, uint royalty) = IERC2981(selectedOffer.contractAddress)\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t.royaltyInfo(\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tselectedOffer.tokenId,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tselectedOffer.price\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t);\\n\\t\\t\\ttotalSent += royalty;\\n\\t\\t\\tpayable(creator).transfer(royalty);\\n\\t\\t}\\n\\n\\t\\tuint256 toPoster = selectedOffer.price - totalSent;\\n\\t\\tpayable(selectedOffer.sellerAddress).transfer(toPoster);\\n\\t\\t\\n\\t\\tIERC721(selectedOffer.contractAddress).safeTransferFrom(\\n\\t\\t\\taddress(selectedOffer.sellerAddress),\\n\\t\\t\\tpayable(msg.sender),\\n\\t\\t\\tselectedOffer.tokenId\\n\\t\\t);\\n\\n\\t\\toffers[offerIndex].tradeStatus = OfferStatus.CLOSED;\\n\\t\\ttokenOnSale[selectedOffer.contractAddress][selectedOffer.tokenId] = false;\\n\\n\\t\\temit OfferStatusChange(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\tselectedOffer.contractAddress,\\n\\t\\t\\tselectedOffer.tokenId,\\n\\t\\t\\tselectedOffer.price,\\n\\t\\t\\tOfferStatus.CLOSED,\\n\\t\\t\\tofferIndex\\n\\t\\t);\\n\\t}\\n\\n\\t/// @notice \\tCancels an offer on the marketplace\\n\\t/// @dev \\t\\tThis doesn't delete the entry, just marks it as CANCELLED\\n\\t/// @param \\t\\tofferIndex \\t\\tIndex of the offer to be cancelled\\n\\tfunction cancelOffer(uint256 offerIndex) public OpenOffer(offerIndex) {\\n\\t\\tOffer memory offer = offers[offerIndex];\\n\\t\\t_onlyTokenHolder(offer.contractAddress, offer.tokenId);\\n\\n\\t\\toffers[offerIndex].tradeStatus = OfferStatus.CANCELLED;\\n\\t\\ttokenOnSale[offer.contractAddress][offer.tokenId] = false;\\n\\n\\t\\temit OfferStatusChange(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\toffer.contractAddress,\\n\\t\\t\\toffer.tokenId,\\n\\t\\t\\toffer.price,\\n\\t\\t\\tOfferStatus.CANCELLED,\\n\\t\\t\\tofferIndex\\n\\t\\t);\\n\\t}\\n\\n\\t/// @notice \\tReturns all open offers on the marketplace\\n\\t/// @dev \\t\\tThis is a view function that uses loops, do not use on any non-view function\\n\\t/// @return \\tAn array of all open offers on the marketplace\\n\\tfunction getAllOnSale() public view virtual returns (Offer[] memory) {\\n\\t\\tuint256 counter = 0;\\n\\t\\tuint256 itemCounter = 0;\\n\\t\\tfor (uint256 i = 0; i < tradeCounter; i++) {\\n\\t\\t\\tif (offers[i].tradeStatus == OfferStatus.OPEN) {\\n\\t\\t\\t\\tcounter++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tOffer[] memory tokensOnSale = new Offer[](counter);\\n\\t\\tif (counter != 0) {\\n\\t\\t\\tfor (uint256 i = 0; i < tradeCounter; i++) {\\n\\t\\t\\t\\tif (offers[i].tradeStatus == OfferStatus.OPEN) {\\n\\t\\t\\t\\t\\ttokensOnSale[itemCounter] = offers[i];\\n\\t\\t\\t\\t\\titemCounter++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn tokensOnSale;\\n\\t}\\n\\n\\t/// @notice \\tReturns all offers made by an user\\n\\t/// @param \\t\\tuser \\t\\tAddress of the seller\\n\\t/// @return \\tAn array of all offers made by a specific user\\n\\tfunction getUserOffers(address user) public view returns (Offer[] memory) {\\n\\t\\tuint256 counter = 0;\\n\\t\\tuint256 itemCounter = 0;\\n\\t\\tfor (uint256 i = 0; i < tradeCounter; i++) {\\n\\t\\t\\tif (offers[i].sellerAddress == user) {\\n\\t\\t\\t\\tcounter++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tOffer[] memory tokensByOwner = new Offer[](counter);\\n\\t\\tif (counter != 0) {\\n\\t\\t\\tfor (uint256 i = 0; i < tradeCounter; i++) {\\n\\t\\t\\t\\tif (offers[i].sellerAddress == user) {\\n\\t\\t\\t\\t\\ttokensByOwner[itemCounter] = offers[i];\\n\\t\\t\\t\\t\\titemCounter++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn tokensByOwner;\\n\\t}\\n\\n\\t/// @notice \\tUpdates the price of an offer\\n\\t/// @dev \\t\\tPrice is the only thing that can be updated on any offer\\n\\t/// @param \\t\\tofferIndex \\t\\tIndex of the offer\\n\\t/// @param \\t\\tnewPrice \\t\\tNew price for the offer\\n\\tfunction updateOffer(uint256 offerIndex, uint256 newPrice) public OpenOffer(offerIndex) {\\n\\t\\tOffer storage selectedOffer = offers[offerIndex];\\n\\t\\t_onlyTokenHolder(selectedOffer.contractAddress, selectedOffer.tokenId);\\n\\t\\tif (msg.sender != selectedOffer.sellerAddress) {\\n\\t\\t\\tselectedOffer.sellerAddress = msg.sender;\\n\\t\\t}\\n\\t\\tuint oldPrice = selectedOffer.price;\\n\\t\\tselectedOffer.price = newPrice;\\n\\t\\temit UpdatedOfferPrice(offerIndex, selectedOffer.contractAddress, oldPrice, newPrice);\\n\\t}\\n\\n\\t/// @notice \\tQueries the marketplace to find if a token is on sale\\n\\t/// @param \\t\\tcontractAddress \\t\\tAddress of the ERC721 contract\\n\\t/// @param \\t\\ttokenId \\t\\t\\t\\tIndex of the NFT\\n\\t/// @return \\tBoolean value, true if there is an open offer on the marketplace\\n\\tfunction getTokenIdStatus(\\n\\t\\taddress contractAddress,\\n\\t\\tuint256 tokenId\\n\\t) public view returns (bool) {\\n\\t\\treturn tokenOnSale[contractAddress][tokenId];\\n\\t}\\n\\n\\t/// @notice \\tUpdates the treasury address\\n\\t/// @dev \\t\\tIf the treasury is a contract, make sure it has a receive function\\n\\t/// @param \\t\\t_newTreasury \\tNew treasury address\\n\\tfunction setTreasuryAddress(\\n\\t\\taddress _newTreasury\\n\\t) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\trequire(_newTreasury != address(0), \\\"invalid address\\\");\\n\\t\\ttreasuryAddress = _newTreasury;\\n\\t\\temit ChangedTreasuryAddress(_newTreasury);\\n\\t}\\n\\n\\t/// @notice Sets the new treasury fee\\n\\t/// @param _newFee New Fee\\n\\tfunction setTreasuryFee(\\n\\t\\tuint _newFee\\n\\t) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\ttreasuryFee = _newFee;\\n\\t\\temit ChangedTreasuryFee(treasuryAddress, _newFee);\\n\\t}\\n\\n\\t/// @notice \\tSets the new fee that will be paid to RAIR nodes\\n\\t/// @param \\t\\t_newFee \\tNew Fee\\n\\tfunction setNodeFee(uint _newFee) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\tnodeFee = _newFee;\\n\\t\\temit ChangedNodeFee(_newFee);\\n\\t}\\n\\n\\t/// @notice \\tUpdates the precision decimals on percentages and fees\\n\\t/// @dev \\t\\tAutomatically updates node and treasury fees\\n\\t/// @dev \\t\\tSales made before the update will have a special bit of code on sale execution to handle this change\\n\\t/// @dev \\t\\tNew sales will be required to follow the new number of decimals\\n\\t/// @param \\t\\t_newDecimals \\t\\tNew number of decimals\\n\\tfunction updateFeeDecimals(uint8 _newDecimals) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\ttreasuryFee = _updatePrecision(treasuryFee, feeDecimals, _newDecimals); \\n\\t\\tnodeFee = _updatePrecision(nodeFee, feeDecimals, _newDecimals); \\n\\t\\tfeeDecimals = _newDecimals;\\n\\t}\\n\\n\\t/// @notice \\tUpdates the precision of a number\\n\\t/// @dev \\t\\tMultiply first to not lose decimals on the way\\n\\t/// @return \\tUpdated number\\n\\tfunction _updatePrecision(uint number, uint oldDecimals, uint newDecimals) internal pure returns (uint) {\\n\\t\\treturn (number * (10 ** newDecimals)) / (10 ** oldDecimals); \\n\\t}\\n\\n\\t/// @notice \\tPauses / Resumes sales on the contract\\n\\t/// @dev \\t\\tOnly prevents offer creation and executions, the other functions continue as normal\\n\\t/// @param \\t\\t_pause \\t\\tBoolean flag to pause (true) or resume (false) the contract\\n\\tfunction pauseContract(bool _pause) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\tpaused = _pause;\\n\\t}\\n\\n\\t/// @notice  \\tWithdraws any funds stuck on the resale marketplace\\n\\t/// @dev \\t\\tThere shouldn't be any funds stuck on the resale marketplace\\n\\t/// @param \\t\\t_amount \\tAmount of funds to be withdrawn\\n\\tfunction withdraw(uint256 _amount) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\tpayable(msg.sender).transfer(_amount);\\n\\t}\\n}\",\"keccak256\":\"0x84709948555becd18be0c7265a2468dcfbe67d9639aa5c512eefdccaf32d24d7\",\"license\":\"GPL-3.0\"},\"contracts/Tokens/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.10; \\n\\ninterface IERC2981 {\\n    /// ERC165 bytes to add to interface array - set in parent contract\\n    /// implementing this standard\\n    ///\\n    /// bytes4(keccak256(\\\"royaltyInfo(uint256,uint256,bytes)\\\")) == 0xc155531d\\n    /// bytes4 private constant _INTERFACE_ID_ERC2981 = 0xc155531d;\\n    /// _registerInterface(_INTERFACE_ID_ERC2981);\\n\\n    /// @notice Called with the sale price to determine how much royalty\\n    //          is owed and to whom.\\n    /// @param _tokenId - the NFT asset queried for royalty information\\n    /// @param _salePrice - the sale price of the NFT asset specified by _tokenId\\n    /// @return receiver - address of who should be sent the royalty payment\\n    /// @return royaltyAmount - the royalty payment amount for _value sale price\\n    function royaltyInfo(\\n    \\tuint256 _tokenId,\\n    \\tuint256 _salePrice)\\n    external returns (\\n    \\taddress receiver,\\n    \\tuint256 royaltyAmount);\\n\\n    /// @notice Informs callers that this contract supports ERC2981\\n    /// @dev If `_registerInterface(_INTERFACE_ID_ERC2981)` is called\\n    ///      in the initializer, this should be automatic\\n    /// @param interfaceID The interface identifier, as specified in ERC-165\\n    /// @return `true` if the contract implements\\n    ///         `_INTERFACE_ID_ERC2981` and `false` otherwise\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\n}\",\"keccak256\":\"0x55209767959f59149522aab059c397444a37dc66f38216c3dce269d723a76325\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101b75760003560e01c8063802c2a00116100ec578063cc0f17861161008a578063e272b89211610064578063e272b89214610546578063ef706adf14610566578063f416253014610586578063fa9543a31461059c57600080fd5b8063cc0f1786146104db578063cc32d17614610510578063d547741f1461052657600080fd5b806391d14854116100c657806391d148541461044e5780639cbd43161461046e578063a217fddf1461048e578063c5f956af146104a357600080fd5b8063802c2a00146103d35780638909331014610419578063908945591461043957600080fd5b80633000831c116101595780636605bfda116101335780636605bfda1461032b578063661d2c2c1461034b57806377e741c71461037857806379a799f11461039857600080fd5b80633000831c146102d157806336568abe146102f15780635c975abb1461031157600080fd5b8063248a9ca311610195578063248a9ca3146102265780632a1da982146102645780632e1a7d4d146102915780632f2ff15d146102b157600080fd5b806301ffc9a7146101bc5780630b7b925b146101f15780631cfb7f1d14610213575b600080fd5b3480156101c857600080fd5b506101dc6101d736600461272c565b6105bc565b60405190151581526020015b60405180910390f35b3480156101fd57600080fd5b5061021161020c366004612756565b6105f3565b005b610211610221366004612778565b6106f5565b34801561023257600080fd5b50610256610241366004612778565b60009081526020819052604090206001015490565b6040519081526020016101e8565b34801561027057600080fd5b5061028461027f366004612778565b610ea6565b6040516101e89190612815565b34801561029d57600080fd5b506102116102ac366004612778565b610f4d565b3480156102bd57600080fd5b506102116102cc366004612838565b610f8a565b3480156102dd57600080fd5b506102116102ec366004612868565b610faf565b3480156102fd57600080fd5b5061021161030c366004612838565b61101f565b34801561031d57600080fd5b506007546101dc9060ff1681565b34801561033757600080fd5b5061021161034636600461288b565b61109d565b34801561035757600080fd5b5061036b61036636600461288b565b611146565b6040516101e891906128a8565b34801561038457600080fd5b50610211610393366004612778565b611308565b3480156103a457600080fd5b506101dc6103b33660046128f6565b600660209081526000928352604080842090915290825290205460ff1681565b3480156103df57600080fd5b506101dc6103ee3660046128f6565b6001600160a01b03919091166000908152600660209081526040808320938352929052205460ff1690565b34801561042557600080fd5b50610211610434366004612778565b61135b565b34801561044557600080fd5b5061036b61139b565b34801561045a57600080fd5b506101dc610469366004612838565b611570565b34801561047a57600080fd5b5061021161048936600461296e565b611599565b34801561049a57600080fd5b50610256600081565b3480156104af57600080fd5b506001546104c3906001600160a01b031681565b6040516001600160a01b0390911681526020016101e8565b3480156104e757600080fd5b506001546104fd90600160a01b900461ffff1681565b60405161ffff90911681526020016101e8565b34801561051c57600080fd5b5061025660035481565b34801561053257600080fd5b50610211610541366004612838565b611b1d565b34801561055257600080fd5b506102116105613660046129ff565b611b42565b34801561057257600080fd5b50610211610581366004612778565b611b61565b34801561059257600080fd5b5061025660025481565b3480156105a857600080fd5b506102116105b7366004612a1c565b611cf0565b60006001600160e01b03198216637965db0b60e01b14806105ed57506301ffc9a760e01b6001600160e01b03198316145b92915050565b81600080828152600460208190526040909120015460ff16600281111561061c5761061c612791565b146106425760405162461bcd60e51b815260040161063990612a66565b60405180910390fd5b60008381526004602052604090206001810154600282015461066d916001600160a01b031690612243565b80546001600160a01b0316331461068f5780546001600160a01b031916331781555b600381018054908490556001820154604080518781526001600160a01b0390921660208301528101829052606081018590527f66a9a8c029fb39d2ef36eee2de9d41486a0f74acfba41abadcd00b923203d4e29060800160405180910390a15050505050565b80600080828152600460208190526040909120015460ff16600281111561071e5761071e612791565b1461073b5760405162461bcd60e51b815260040161063990612a66565b60075460ff161561075e5760405162461bcd60e51b815260040161063990612ab0565b6000828152600460208181526040808420815160c08101835281546001600160a01b03908116825260018301541693810193909352600280820154928401929092526003810154606084015292830154919291608084019160ff909116908111156107cb576107cb612791565b60028111156107dc576107dc612791565b81526004919091015461010090046001600160a01b031660209091015290503315801590610814575080516001600160a01b03163314155b61086e5760405162461bcd60e51b815260206004820152602560248201527f526573616c65204d61726b6574706c6163653a20496e76616c69642061646472604482015264657373657360d81b6064820152608401610639565b333b156108e35760405162461bcd60e51b815260206004820152603860248201527f526573616c65204d61726b6574706c6163653a2043616e6e6f7420747275737460448201527f20736d61727420636f6e747261637420617320627579657200000000000000006064820152608401610639565b806060015134101561092c5760405162461bcd60e51b8152602060048201526012602482015271496e737566696369656e742046756e64732160701b6044820152606401610639565b60015460009061094890600160a01b900461ffff16600a612bee565b610953906064612bfe565b9050336001600160a01b03166108fc8360600151346109729190612c1d565b6040518115909202916000818181858888f1935050505015801561099a573d6000803e3d6000fd5b5060008160035484606001516109b09190612bfe565b6109ba9190612c34565b90508260a001516001600160a01b03166108fc8360025486606001516109e09190612bfe565b6109ea9190612c34565b6040518115909202916000818181858888f19350505050158015610a12573d6000803e3d6000fd5b506001546040516001600160a01b039091169082156108fc029083906000818181858888f19350505050158015610a4d573d6000803e3d6000fd5b50600081836002548660600151610a649190612bfe565b610a6e9190612c34565b610a789190612c56565b6020808601516001600160a01b0316600090815260059091526040902080549192509015610bfb576001546002820154600091600160a01b900461ffff1614610b38575b8154811015610b3457610b01826001018281548110610add57610add612c6e565b6000918252602090912001546002840154600154600160a01b900461ffff16612321565b826001018281548110610b1657610b16612c6e565b60009182526020909120015580610b2c81612c84565b915050610abc565b5060005b8154811015610bf557600085836001018381548110610b5957610b59612c6e565b90600052602060002001548860600151610b739190612bfe565b610b7d9190612c34565b9050826000018281548110610b9457610b94612c6e565b60009182526020822001546040516001600160a01b039091169183156108fc02918491818181858888f19350505050158015610bd4573d6000803e3d6000fd5b50610bdf8185612c56565b9350508080610bed90612c84565b915050610b38565b50610d49565b60208501516040516301ffc9a760e01b8152632baae9fd60e01b60048201526001600160a01b03909116906301ffc9a790602401602060405180830381865afa158015610c4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c709190612c9d565b15610d495760008086602001516001600160a01b0316632a55205a886040015189606001516040518363ffffffff1660e01b8152600401610cbb929190918252602082015260400190565b60408051808303816000875af1158015610cd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cfd9190612cba565b9092509050610d0c8185612c56565b6040519094506001600160a01b0383169082156108fc029083906000818181858888f19350505050158015610d45573d6000803e3d6000fd5b5050505b6000828660600151610d5b9190612c1d565b86516040519192506001600160a01b03169082156108fc029083906000818181858888f19350505050158015610d95573d6000803e3d6000fd5b50602086015186516040808901519051632142170760e11b81526001600160a01b03928316600482015233602482015260448101919091529116906342842e0e90606401600060405180830381600087803b158015610df357600080fd5b505af1158015610e07573d6000803e3d6000fd5b50505060008981526004602081815260408084209092018054600160ff1991821681179092558b830180516001600160a01b03168652600684528486208d860180518852945294849020805490911690559251905160608b015192517f41e03f4e89bba40e7c697cf5eb205e7c8a3144fee6196d098f985afbc67f91669550610e94943394918f90612ce8565b60405180910390a15050505050505050565b610eae612643565b600082815260046020818152604092839020835160c08101855281546001600160a01b039081168252600183015416928101929092526002808201549483019490945260038101546060830152918201549092608084019160ff1690811115610f1957610f19612791565b6002811115610f2a57610f2a612791565b81526004919091015461010090046001600160a01b031660209091015292915050565b6000610f588161234d565b604051339083156108fc029084906000818181858888f19350505050158015610f85573d6000803e3d6000fd5b505050565b600082815260208190526040902060010154610fa58161234d565b610f85838361235a565b6000610fba8161234d565b600354600154610fd99190600160a01b900461ffff1660ff8516612321565b600355600254600154610ffb9190600160a01b900461ffff1660ff8516612321565b600255506001805461ffff60a01b191660ff92909216600160a01b02919091179055565b6001600160a01b038116331461108f5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610639565b61109982826123de565b5050565b60006110a88161234d565b6001600160a01b0382166110f05760405162461bcd60e51b815260206004820152600f60248201526e696e76616c6964206164647265737360881b6044820152606401610639565b600180546001600160a01b0319166001600160a01b0384169081179091556040519081527ff8ef33c27d5967a7c9bb579ab89f878b75935e5cf8d3a333efde727a18b928c8906020015b60405180910390a15050565b606060008060005b600854811015611199576000818152600460205260409020546001600160a01b03808716911603611187578261118381612c84565b9350505b8061119181612c84565b91505061114e565b5060008267ffffffffffffffff8111156111b5576111b5612d2c565b6040519080825280602002602001820160405280156111ee57816020015b6111db612643565b8152602001906001900390816111d35790505b50905082156113005760005b6008548110156112fe576000818152600460205260409020546001600160a01b038088169116036112ec57600081815260046020818152604092839020835160c08101855281546001600160a01b039081168252600183015416928101929092526002808201549483019490945260038101546060830152918201549092608084019160ff169081111561129057611290612791565b60028111156112a1576112a1612791565b81526004919091015461010090046001600160a01b031660209091015282518390859081106112d2576112d2612c6e565b602002602001018190525082806112e890612c84565b9350505b806112f681612c84565b9150506111fa565b505b949350505050565b60006113138161234d565b6003829055600154604080516001600160a01b039092168252602082018490527ffee0ffc9a309cc56161d3a44f32c0cdbc08cf4c027745cdcfe8fb92c03fa62f1910161113a565b60006113668161234d565b60028290556040518281527f557f3e7358636963c97de23e6756c7058d3a368754ec3d1b497f23e4dd964e799060200161113a565b606060008060005b6008548110156113f85760008181526004602081905260408220015460ff1660028111156113d3576113d3612791565b036113e657826113e281612c84565b9350505b806113f081612c84565b9150506113a3565b5060008267ffffffffffffffff81111561141457611414612d2c565b60405190808252806020026020018201604052801561144d57816020015b61143a612643565b8152602001906001900390816114325790505b50905082156115695760005b6008548110156115675760008181526004602081905260408220015460ff16600281111561148957611489612791565b0361155557600081815260046020818152604092839020835160c08101855281546001600160a01b039081168252600183015416928101929092526002808201549483019490945260038101546060830152918201549092608084019160ff16908111156114f9576114f9612791565b600281111561150a5761150a612791565b81526004919091015461010090046001600160a01b0316602090910152825183908590811061153b5761153b612c6e565b6020026020010181905250828061155190612c84565b9350505b8061155f81612c84565b915050611459565b505b9392505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6040516301ffc9a760e01b8152632baae9fd60e01b6004820152859081906001600160a01b038216906301ffc9a790602401602060405180830381865afa1580156115e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061160c9190612c9d565b6116965760405162461bcd60e51b815260206004820152604f60248201527f526573616c65204d61726b6574706c6163653a204f6e6c79207468652045495060448201527f2d323938312072656365697665722063616e206265207265636f676e697a656460648201526e1030b9903a34329031b932b0ba37b960891b608482015260a401610639565b60405163152a902d60e11b8152600060048201819052620186a06024830152906001600160a01b03831690632a55205a9060440160408051808303816000875af11580156116e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170c9190612cba565b5090506001600160a01b03831661177b5760405162461bcd60e51b815260206004820152602d60248201527f526573616c65204d61726b6574706c6163653a20496e76616c6964206164647260448201526c195cdcc81cdc1958da599a5959609a1b6064820152608401610639565b6001600160a01b03811633146117f95760405162461bcd60e51b815260206004820152603f60248201527f526573616c65204d61726b6574706c6163653a204f6e6c7920746f6b656e206360448201527f726561746f722063616e2073657420637573746f6d20726f79616c74696573006064820152608401610639565b8584146118815760405162461bcd60e51b815260206004820152604a60248201527f526573616c65204d61726b6574706c6163653a20526563697069656e7473206160448201527f6e642050657263656e74616765732073686f756c6420686176652074686520736064820152690c2daca40d8cadccee8d60b31b608482015260a401610639565b6000805b8781101561198e576118bd8989838181106118a2576118a2612c6e565b90506020020160208101906118b7919061288b565b3b151590565b156119565760405162461bcd60e51b815260206004820152605860248201527f526573616c65204d61726b6574706c6163653a20466f7220736563757269747960448201527f20726561736f6e7320776520646f6e277420616c6c6f7720736d61727420636f60648201527f6e74726163747320746f20726563656976652066756e64730000000000000000608482015260a401610639565b86868281811061196857611968612c6e565b905060200201358261197a9190612c56565b91508061198681612c84565b915050611885565b506003546002546001546119ae90600160a01b900461ffff16600a612bee565b6119b9906064612bfe565b6119c39190612c1d565b6119cd9190612c1d565b8110611a315760405162461bcd60e51b815260206004820152602d60248201527f526573616c65204d61726b6574706c6163653a20526f79616c7469657320657860448201526c6365656420746865203130302560981b6064820152608401610639565b6001600160a01b0389166000908152600560205260409020600154600160a01b900461ffff166002820155611a67818a8a612679565b50611a766001820188886126dc565b506003546002546001547f8405b689f896a3b88791a33cb30a60fd3911aa903dae9c033b5cb626c21a3c9b928d928c9287929190611ac090600160a01b900461ffff16600a612bee565b611acb906064612bfe565b611ad59190612c1d565b611adf9190612c1d565b611ae99190612c1d565b604080516001600160a01b03909416845260208401929092529082015260600160405180910390a150505050505050505050565b600082815260208190526040902060010154611b388161234d565b610f8583836123de565b6000611b4d8161234d565b506007805460ff1916911515919091179055565b80600080828152600460208190526040909120015460ff166002811115611b8a57611b8a612791565b14611ba75760405162461bcd60e51b815260040161063990612a66565b6000828152600460208181526040808420815160c08101835281546001600160a01b03908116825260018301541693810193909352600280820154928401929092526003810154606084015292830154919291608084019160ff90911690811115611c1457611c14612791565b6002811115611c2557611c25612791565b81526004919091015461010090046001600160a01b03166020918201528101516040820151919250611c5691612243565b60008381526004602081815260408084209092018054600260ff19918216811790925585830180516001600160a01b0316865260068452848620878601805188529452948490208054909116905592519051606085015192517f41e03f4e89bba40e7c697cf5eb205e7c8a3144fee6196d098f985afbc67f916694611ce394339493929091908a90612ce8565b60405180910390a1505050565b8184816001600160a01b03811615801590611d09575060015b611d555760405162461bcd60e51b815260206004820181905260248201527f526573616c65204d61726b6574706c6163653a20496e76616c696420646174616044820152606401610639565b6040516331a9108f60e11b8152600481018390526001600160a01b0382169063e985e9c5908290636352211e90602401602060405180830381865afa158015611da2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc69190612d42565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152306024820152604401602060405180830381865afa158015611e10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e349190612c9d565b80611eb0575060405163020604bf60e21b81526004810183905230906001600160a01b0383169063081812fc90602401602060405180830381865afa158015611e81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea59190612d42565b6001600160a01b0316145b611f145760405162461bcd60e51b815260206004820152602f60248201527f526573616c65204d61726b6574706c6163653a204d61726b6574706c6163652060448201526e1a5cc81b9bdd08185c1c1c9bdd9959608a1b6064820152608401610639565b8487611f208282612243565b60075460ff1615611f435760405162461bcd60e51b815260040161063990612ab0565b853b15611fb85760405162461bcd60e51b815260206004820152603b60248201527f526573616c65204d61726b6574706c6163653a204e6f6465206164647265737360448201527f2063616e6e6f74206265206120736d61727420636f6e747261637400000000006064820152608401610639565b333b1561202d5760405162461bcd60e51b815260206004820152603b60248201527f526573616c65204d61726b6574706c6163653a2043616e6e6f7420747275737460448201527f20736d61727420636f6e7472616374732061732073656c6c65727300000000006064820152608401610639565b6001600160a01b03871660009081526006602090815260408083208c845290915290205460ff16156120b65760405162461bcd60e51b815260206004820152602c60248201527f526573616c65204d61726b6574706c6163653a20546f6b656e20697320616c7260448201526b65616479206f6e2073616c6560a01b6064820152608401610639565b6040805160c0810182523381526001600160a01b0389811660208084019182528385018e8152606085018e81526000608087018181528e871660a08901526008548252600494859052979020865181549087166001600160a01b031991821617825594516001808301805492909816919096161790955590516002808601919091559051600385015594519083018054949593949193909260ff199092169190849081111561216757612167612791565b021790555060a08201518160040160016101000a8154816001600160a01b0302191690836001600160a01b031602179055509050506001600860008282546121af9190612c56565b90915550506001600160a01b03871660009081526006602090815260408083208c84529091528120805460ff191660019081179091556008547f41e03f4e89bba40e7c697cf5eb205e7c8a3144fee6196d098f985afbc67f91669233928b928e928e92909161221e9190612c1d565b60405161223096959493929190612ce8565b60405180910390a1505050505050505050565b6040516331a9108f60e11b815260048101829052829033906001600160a01b03831690636352211e90602401602060405180830381865afa15801561228c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122b09190612d42565b6001600160a01b031614610f855760405162461bcd60e51b815260206004820152603260248201527f526573616c65204d61726b6574706c6163653a204164647265737320646f6573604482015271103737ba1037bbb7103a3432903a37b5b2b760711b6064820152608401610639565b600061232e83600a612d5f565b61233983600a612d5f565b6123439086612bfe565b6113009190612c34565b6123578133612443565b50565b6123648282611570565b611099576000828152602081815260408083206001600160a01b03851684529091529020805460ff1916600117905561239a3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6123e88282611570565b15611099576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b61244d8282611570565b61109957612465816001600160a01b031660146124a7565b6124708360206124a7565b604051602001612481929190612d9b565b60408051601f198184030181529082905262461bcd60e51b825261063991600401612e10565b606060006124b6836002612bfe565b6124c1906002612c56565b67ffffffffffffffff8111156124d9576124d9612d2c565b6040519080825280601f01601f191660200182016040528015612503576020820181803683370190505b509050600360fc1b8160008151811061251e5761251e612c6e565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061254d5761254d612c6e565b60200101906001600160f81b031916908160001a9053506000612571846002612bfe565b61257c906001612c56565b90505b60018111156125f4576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106125b0576125b0612c6e565b1a60f81b8282815181106125c6576125c6612c6e565b60200101906001600160f81b031916908160001a90535060049490941c936125ed81612e43565b905061257f565b5083156115695760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610639565b6040805160c081018252600080825260208201819052918101829052606081018290529060808201908152600060209091015290565b8280548282559060005260206000209081019282156126cc579160200282015b828111156126cc5781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190612699565b506126d8929150612717565b5090565b8280548282559060005260206000209081019282156126cc579160200282015b828111156126cc5782358255916020019190600101906126fc565b5b808211156126d85760008155600101612718565b60006020828403121561273e57600080fd5b81356001600160e01b03198116811461156957600080fd5b6000806040838503121561276957600080fd5b50508035926020909101359150565b60006020828403121561278a57600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b600381106127c557634e487b7160e01b600052602160045260246000fd5b9052565b60018060a01b038082511683528060208301511660208401526040820151604084015260608201516060840152608082015161280860808501826127a7565b5060a09182015116910152565b60c081016105ed82846127c9565b6001600160a01b038116811461235757600080fd5b6000806040838503121561284b57600080fd5b82359150602083013561285d81612823565b809150509250929050565b60006020828403121561287a57600080fd5b813560ff8116811461156957600080fd5b60006020828403121561289d57600080fd5b813561156981612823565b6020808252825182820181905260009190848201906040850190845b818110156128ea576128d78385516127c9565b9284019260c092909201916001016128c4565b50909695505050505050565b6000806040838503121561290957600080fd5b823561291481612823565b946020939093013593505050565b60008083601f84011261293457600080fd5b50813567ffffffffffffffff81111561294c57600080fd5b6020830191508360208260051b850101111561296757600080fd5b9250929050565b60008060008060006060868803121561298657600080fd5b853561299181612823565b9450602086013567ffffffffffffffff808211156129ae57600080fd5b6129ba89838a01612922565b909650945060408801359150808211156129d357600080fd5b506129e088828901612922565b969995985093965092949392505050565b801515811461235757600080fd5b600060208284031215612a1157600080fd5b8135611569816129f1565b60008060008060808587031215612a3257600080fd5b84359350602085013592506040850135612a4b81612823565b91506060850135612a5b81612823565b939692955090935050565b6020808252602a908201527f526573616c65204d61726b6574706c6163653a204f66666572206973206e6f7460408201526920617661696c61626c6560b01b606082015260800190565b60208082526024908201527f526573616c65204d61726b6574706c6163653a2043757272656e746c792070616040820152631d5cd95960e21b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600181815b80851115612b45578160001904821115612b2b57612b2b612af4565b80851615612b3857918102915b93841c9390800290612b0f565b509250929050565b600082612b5c575060016105ed565b81612b69575060006105ed565b8160018114612b7f5760028114612b8957612ba5565b60019150506105ed565b60ff841115612b9a57612b9a612af4565b50506001821b6105ed565b5060208310610133831016604e8410600b8410161715612bc8575081810a6105ed565b612bd28383612b0a565b8060001904821115612be657612be6612af4565b029392505050565b600061156961ffff841683612b4d565b6000816000190483118215151615612c1857612c18612af4565b500290565b600082821015612c2f57612c2f612af4565b500390565b600082612c5157634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115612c6957612c69612af4565b500190565b634e487b7160e01b600052603260045260246000fd5b600060018201612c9657612c96612af4565b5060010190565b600060208284031215612caf57600080fd5b8151611569816129f1565b60008060408385031215612ccd57600080fd5b8251612cd881612823565b6020939093015192949293505050565b6001600160a01b03878116825286166020820152604081018590526060810184905260c08101612d1b60808301856127a7565b8260a0830152979650505050505050565b634e487b7160e01b600052604160045260246000fd5b600060208284031215612d5457600080fd5b815161156981612823565b60006115698383612b4d565b60005b83811015612d86578181015183820152602001612d6e565b83811115612d95576000848401525b50505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612dd3816017850160208801612d6b565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612e04816028840160208801612d6b565b01602801949350505050565b6020815260008251806020840152612e2f816040850160208701612d6b565b601f01601f19169190910160400192915050565b600081612e5257612e52612af4565b50600019019056fea2646970667358221220af5b328255b00eb453d69db7811a9fd6ec0f5259a7a652d0175be77dc13a163464736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "buyResaleOffer(uint256)": {
        "details": "If custom splits exist, it will execute it, if they don't it will try to use the 2981 standard",
        "params": {
          "offerIndex": "Index of the offer on the marketplace"
        }
      },
      "cancelOffer(uint256)": {
        "details": "This doesn't delete the entry, just marks it as CANCELLED",
        "params": {
          "offerIndex": "Index of the offer to be cancelled"
        }
      },
      "constructor": {
        "params": {
          "_treasury": "Address of the treasury"
        }
      },
      "createResaleOffer(uint256,uint256,address,address)": {
        "params": {
          "_contractAddress": "Address of the ERC721 contract",
          "_nodeAddress": "Address of the RAIR node that will receive the node fee",
          "_price": "Price for the NFT to be sold",
          "_tokenId": "Index of the NFT"
        }
      },
      "getAllOnSale()": {
        "details": "This is a view function that uses loops, do not use on any non-view function",
        "returns": {
          "_0": "An array of all open offers on the marketplace"
        }
      },
      "getOfferInfo(uint256)": {
        "params": {
          "offerIndex": "Index of the offer on the marketplace"
        },
        "returns": {
          "selectedOffer": "\tInformation about the offer"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getTokenIdStatus(address,uint256)": {
        "params": {
          "contractAddress": "Address of the ERC721 contract",
          "tokenId": "Index of the NFT"
        },
        "returns": {
          "_0": "Boolean value, true if there is an open offer on the marketplace"
        }
      },
      "getUserOffers(address)": {
        "params": {
          "user": "Address of the seller"
        },
        "returns": {
          "_0": "An array of all offers made by a specific user"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "pauseContract(bool)": {
        "details": "Only prevents offer creation and executions, the other functions continue as normal",
        "params": {
          "_pause": "Boolean flag to pause (true) or resume (false) the contract"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "setCustomRoyalties(address,address[],uint256[])": {
        "details": "You can send empty arrays to unset the creator royalties!",
        "params": {
          "contractAddress": "Address of the ERC721 contract",
          "percentages": "Array of percentages (represented by integers)",
          "recipients": "Array of addresses where the royalties will be sent, they cannot be smart contracts"
        }
      },
      "setNodeFee(uint256)": {
        "params": {
          "_newFee": "New Fee"
        }
      },
      "setTreasuryAddress(address)": {
        "details": "If the treasury is a contract, make sure it has a receive function",
        "params": {
          "_newTreasury": "New treasury address"
        }
      },
      "setTreasuryFee(uint256)": {
        "params": {
          "_newFee": "New Fee"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "updateFeeDecimals(uint8)": {
        "details": "Automatically updates node and treasury feesSales made before the update will have a special bit of code on sale execution to handle this changeNew sales will be required to follow the new number of decimals",
        "params": {
          "_newDecimals": "New number of decimals"
        }
      },
      "updateOffer(uint256,uint256)": {
        "details": "Price is the only thing that can be updated on any offer",
        "params": {
          "newPrice": "New price for the offer",
          "offerIndex": "Index of the offer"
        }
      },
      "withdraw(uint256)": {
        "details": "There shouldn't be any funds stuck on the resale marketplace",
        "params": {
          "_amount": "Amount of funds to be withdrawn"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "buyResaleOffer(uint256)": {
        "notice": "Executes a sale, sending funds to any royalty recipients and transferring the token to the buyer"
      },
      "cancelOffer(uint256)": {
        "notice": "Cancels an offer on the marketplace"
      },
      "constructor": {
        "notice": "Constructor"
      },
      "createResaleOffer(uint256,uint256,address,address)": {
        "notice": "Creates a resale offer on the marketplace"
      },
      "getAllOnSale()": {
        "notice": "Returns all open offers on the marketplace"
      },
      "getOfferInfo(uint256)": {
        "notice": "Returns information about a specific offer"
      },
      "getTokenIdStatus(address,uint256)": {
        "notice": "Queries the marketplace to find if a token is on sale"
      },
      "getUserOffers(address)": {
        "notice": "Returns all offers made by an user"
      },
      "pauseContract(bool)": {
        "notice": "Pauses / Resumes sales on the contract"
      },
      "setCustomRoyalties(address,address[],uint256[])": {
        "notice": "Sets a custom array of royalties for the entire ERC721 contract"
      },
      "setNodeFee(uint256)": {
        "notice": "Sets the new fee that will be paid to RAIR nodes"
      },
      "setTreasuryAddress(address)": {
        "notice": "Updates the treasury address"
      },
      "setTreasuryFee(uint256)": {
        "notice": "Sets the new treasury fee"
      },
      "updateFeeDecimals(uint8)": {
        "notice": "Updates the precision decimals on percentages and fees"
      },
      "updateOffer(uint256,uint256)": {
        "notice": "Updates the price of an offer"
      },
      "withdraw(uint256)": {
        "notice": "Withdraws any funds stuck on the resale marketplace"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/Marketplaces/MarketplaceResale.sol:Resale_MarketPlace",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 6593,
        "contract": "contracts/Marketplaces/MarketplaceResale.sol:Resale_MarketPlace",
        "label": "treasuryAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 6596,
        "contract": "contracts/Marketplaces/MarketplaceResale.sol:Resale_MarketPlace",
        "label": "feeDecimals",
        "offset": 20,
        "slot": "1",
        "type": "t_uint16"
      },
      {
        "astId": 6599,
        "contract": "contracts/Marketplaces/MarketplaceResale.sol:Resale_MarketPlace",
        "label": "nodeFee",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 6602,
        "contract": "contracts/Marketplaces/MarketplaceResale.sol:Resale_MarketPlace",
        "label": "treasuryFee",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 6607,
        "contract": "contracts/Marketplaces/MarketplaceResale.sol:Resale_MarketPlace",
        "label": "offers",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(Offer)6535_storage)"
      },
      {
        "astId": 6612,
        "contract": "contracts/Marketplaces/MarketplaceResale.sol:Resale_MarketPlace",
        "label": "contractSplits",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(ContractCustomSplits)6544_storage)"
      },
      {
        "astId": 6618,
        "contract": "contracts/Marketplaces/MarketplaceResale.sol:Resale_MarketPlace",
        "label": "tokenOnSale",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 6621,
        "contract": "contracts/Marketplaces/MarketplaceResale.sol:Resale_MarketPlace",
        "label": "paused",
        "offset": 0,
        "slot": "7",
        "type": "t_bool"
      },
      {
        "astId": 6623,
        "contract": "contracts/Marketplaces/MarketplaceResale.sol:Resale_MarketPlace",
        "label": "tradeCounter",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 6625,
        "contract": "contracts/Marketplaces/MarketplaceResale.sol:Resale_MarketPlace",
        "label": "offerCounter",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(OfferStatus)6521": {
        "encoding": "inplace",
        "label": "enum Resale_MarketPlace.OfferStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_struct(ContractCustomSplits)6544_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Resale_MarketPlace.ContractCustomSplits)",
        "numberOfBytes": "32",
        "value": "t_struct(ContractCustomSplits)6544_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Offer)6535_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Resale_MarketPlace.Offer)",
        "numberOfBytes": "32",
        "value": "t_struct(Offer)6535_storage"
      },
      "t_struct(ContractCustomSplits)6544_storage": {
        "encoding": "inplace",
        "label": "struct Resale_MarketPlace.ContractCustomSplits",
        "members": [
          {
            "astId": 6538,
            "contract": "contracts/Marketplaces/MarketplaceResale.sol:Resale_MarketPlace",
            "label": "recipients",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 6541,
            "contract": "contracts/Marketplaces/MarketplaceResale.sol:Resale_MarketPlace",
            "label": "percentages",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 6543,
            "contract": "contracts/Marketplaces/MarketplaceResale.sol:Resale_MarketPlace",
            "label": "precisionDecimals",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Offer)6535_storage": {
        "encoding": "inplace",
        "label": "struct Resale_MarketPlace.Offer",
        "members": [
          {
            "astId": 6523,
            "contract": "contracts/Marketplaces/MarketplaceResale.sol:Resale_MarketPlace",
            "label": "sellerAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6525,
            "contract": "contracts/Marketplaces/MarketplaceResale.sol:Resale_MarketPlace",
            "label": "contractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 6527,
            "contract": "contracts/Marketplaces/MarketplaceResale.sol:Resale_MarketPlace",
            "label": "tokenId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6529,
            "contract": "contracts/Marketplaces/MarketplaceResale.sol:Resale_MarketPlace",
            "label": "price",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 6532,
            "contract": "contracts/Marketplaces/MarketplaceResale.sol:Resale_MarketPlace",
            "label": "tradeStatus",
            "offset": 0,
            "slot": "4",
            "type": "t_enum(OfferStatus)6521"
          },
          {
            "astId": 6534,
            "contract": "contracts/Marketplaces/MarketplaceResale.sol:Resale_MarketPlace",
            "label": "nodeAddress",
            "offset": 1,
            "slot": "4",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/Marketplaces/MarketplaceResale.sol:Resale_MarketPlace",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/Marketplaces/MarketplaceResale.sol:Resale_MarketPlace",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}