{
	"info": {
		"_postman_id": "0bbed6d1-d6e2-46ef-acec-d01ae2087af7",
		"name": "RAIR",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "Create User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 200\", () => {",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"pm.test(\"Schema Matches\", () => {",
									"    pm.response.to.have.jsonSchema({",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"success\": true,",
									"            \"user\": {",
									"                \"email\": null,",
									"                \"firstName\": null,",
									"                \"lastName\": null,",
									"                \"_id\": \"6154191a4ca95f001c24e899\",",
									"                \"publicAddress\": \"0xcbefcf87ee0a1b053c10ae16d969be286123994e\",",
									"                \"adminNFT\": \"0x88B48F654c30e99bc2e4A1559b4Dcf1aD93FA656\",",
									"                \"nonce\": \"_aP6akQdYrmZyDmut2QK1\",",
									"                \"creationDate\": \"2021-09-29T07:43:22.886Z\"",
									"            }",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"success\",",
									"        \"user\"",
									"    ],",
									"    \"properties\": {",
									"        \"success\": {",
									"            \"$id\": \"#/properties/success\",",
									"            \"type\": \"boolean\",",
									"            \"title\": \"The success schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": false,",
									"            \"examples\": [",
									"                true",
									"            ]",
									"        },",
									"        \"user\": {",
									"            \"$id\": \"#/properties/user\",",
									"            \"type\": \"object\",",
									"            \"title\": \"The user schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": {},",
									"            \"examples\": [",
									"                {",
									"                    \"email\": null,",
									"                    \"firstName\": null,",
									"                    \"lastName\": null,",
									"                    \"_id\": \"6154191a4ca95f001c24e899\",",
									"                    \"publicAddress\": \"0xcbefcf87ee0a1b053c10ae16d969be286123994e\",",
									"                    \"adminNFT\": \"0x88B48F654c30e99bc2e4A1559b4Dcf1aD93FA656\",",
									"                    \"nonce\": \"_aP6akQdYrmZyDmut2QK1\",",
									"                    \"creationDate\": \"2021-09-29T07:43:22.886Z\"",
									"                }",
									"            ],",
									"            \"required\": [",
									"                \"email\",",
									"                \"firstName\",",
									"                \"lastName\",",
									"                \"_id\",",
									"                \"publicAddress\",",
									"                \"adminNFT\",",
									"                \"nonce\",",
									"                \"creationDate\"",
									"            ],",
									"            \"properties\": {",
									"                \"email\": {",
									"                    \"$id\": \"#/properties/user/properties/email\",",
									"                    \"type\": \"null\",",
									"                    \"title\": \"The email schema\",",
									"                    \"description\": \"An explanation about the purpose of this instance.\",",
									"                    \"default\": null,",
									"                    \"examples\": [",
									"                        null",
									"                    ]",
									"                },",
									"                \"firstName\": {",
									"                    \"$id\": \"#/properties/user/properties/firstName\",",
									"                    \"type\": \"null\",",
									"                    \"title\": \"The firstName schema\",",
									"                    \"description\": \"An explanation about the purpose of this instance.\",",
									"                    \"default\": null,",
									"                    \"examples\": [",
									"                        null",
									"                    ]",
									"                },",
									"                \"lastName\": {",
									"                    \"$id\": \"#/properties/user/properties/lastName\",",
									"                    \"type\": \"null\",",
									"                    \"title\": \"The lastName schema\",",
									"                    \"description\": \"An explanation about the purpose of this instance.\",",
									"                    \"default\": null,",
									"                    \"examples\": [",
									"                        null",
									"                    ]",
									"                },",
									"                \"_id\": {",
									"                    \"$id\": \"#/properties/user/properties/_id\",",
									"                    \"type\": \"string\",",
									"                    \"title\": \"The _id schema\",",
									"                    \"description\": \"An explanation about the purpose of this instance.\",",
									"                    \"default\": \"\",",
									"                    \"examples\": [",
									"                        \"6154191a4ca95f001c24e899\"",
									"                    ]",
									"                },",
									"                \"publicAddress\": {",
									"                    \"$id\": \"#/properties/user/properties/publicAddress\",",
									"                    \"type\": \"string\",",
									"                    \"title\": \"The publicAddress schema\",",
									"                    \"description\": \"An explanation about the purpose of this instance.\",",
									"                    \"default\": \"\",",
									"                    \"examples\": [",
									"                        \"0xcbefcf87ee0a1b053c10ae16d969be286123994e\"",
									"                    ]",
									"                },",
									"                \"adminNFT\": {",
									"                    \"$id\": \"#/properties/user/properties/adminNFT\",",
									"                    \"type\": \"string\",",
									"                    \"title\": \"The adminNFT schema\",",
									"                    \"description\": \"An explanation about the purpose of this instance.\",",
									"                    \"default\": \"\",",
									"                    \"examples\": [",
									"                        \"0x88B48F654c30e99bc2e4A1559b4Dcf1aD93FA656\"",
									"                    ]",
									"                },",
									"                \"nonce\": {",
									"                    \"$id\": \"#/properties/user/properties/nonce\",",
									"                    \"type\": \"string\",",
									"                    \"title\": \"The nonce schema\",",
									"                    \"description\": \"An explanation about the purpose of this instance.\",",
									"                    \"default\": \"\",",
									"                    \"examples\": [",
									"                        \"_aP6akQdYrmZyDmut2QK1\"",
									"                    ]",
									"                },",
									"                \"creationDate\": {",
									"                    \"$id\": \"#/properties/user/properties/creationDate\",",
									"                    \"type\": \"string\",",
									"                    \"title\": \"The creationDate schema\",",
									"                    \"description\": \"An explanation about the purpose of this instance.\",",
									"                    \"default\": \"\",",
									"                    \"examples\": [",
									"                        \"2021-09-29T07:43:22.886Z\"",
									"                    ]",
									"                }",
									"            },",
									"            \"additionalProperties\": true",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"",
									"})",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment')",
									"pm.environment.set('timestamp', moment().format((\"YYYYMMDDHHmmss\")));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"adminNFT\": \"{{$timestamp}}\",\n    \"publicAddress\": \"0x000000000011111111112222222222{{$timestamp}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/users",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User - Duplicate publicAddress",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 500\", () => {",
									"    pm.response.to.have.status(500)",
									"})",
									"",
									"pm.test(\"Response Message\", () => {",
									"    pm.expect(pm.response.json().message).to.contain(\"duplicate key error\")",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"adminNFT\": \"0x88B48F654c30e99bc2e4A1559b4Dcf1aD93FA656\",\n    \"publicAddress\": \"0x67B99531A2ab44F5c71474BD54d07FE78D7C5516\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/users",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User - invalid publicAddress",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 400\", () => {",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"pm.test(\"Response Message\", () => {",
									"    pm.expect(pm.response.json().message).to.equal(\"\\\"publicAddress\\\" is not allowed to be empty\")",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"adminNFT\": \"0x88B48F654c30e99bc2e4A1559b4Dcf1aD93FA656\",\n    \"publicAddress\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/users",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User - Invalid adminNFT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 400\", () => {",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"pm.test(\"Response Message\", () => {",
									"    pm.expect(pm.response.json().message).to.equal(\"\\\"adminNFT\\\" is not allowed to be empty\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"adminNFT\": \"\",\n    \"publicAddress\": \"0x67B99531A2ab44F5c71474BD54d07FE78D7C5516\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/users",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User - publicAddress Not provided",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 400\", () => {",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"pm.test(\"Response Message\", () => {",
									"    pm.expect(pm.response.json().message).to.equal(\"\\\"publicAddress\\\" is required\")",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"adminNFT\": \"0x88B48F654c30e99bc2e4A1559b4Dcf1aD93FA656\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/users",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User - adminNFT missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 500\", () => {",
									"    pm.response.to.have.status(500)",
									"})",
									"",
									"pm.test(\"Response Message\", () => {",
									"    pm.expect(pm.response.json().message).to.contain(\"`adminNFT` is required.\")",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"publicAddress\": \"0x67B99531A2ab44F5c71474BD54d07FE78D7C5517\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/users",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 200\", () => {",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"pm.test(\"Schema Matches\", () => {",
									"    pm.response.to.have.jsonSchema({",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"success\": true,",
									"            \"user\": {",
									"                \"email\": null,",
									"                \"firstName\": null,",
									"                \"lastName\": null,",
									"                \"_id\": \"614c28ecfb0dbf001caad32b\",",
									"                \"publicAddress\": \"0x67b99531a2ab44f5c71474bd54d07fe78d7c5516\",",
									"                \"nonce\": \"ibvCPo0aW5v9XSExltdkO\",",
									"                \"creationDate\": \"2021-09-23T07:12:44.786Z\"",
									"            }",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"success\",",
									"        \"user\"",
									"    ],",
									"    \"properties\": {",
									"        \"success\": {",
									"            \"$id\": \"#/properties/success\",",
									"            \"type\": \"boolean\",",
									"            \"title\": \"The success schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": false,",
									"            \"examples\": [",
									"                true",
									"            ]",
									"        },",
									"        \"user\": {",
									"            \"$id\": \"#/properties/user\",",
									"            \"type\": \"object\",",
									"            \"title\": \"The user schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": {},",
									"            \"examples\": [",
									"                {",
									"                    \"email\": null,",
									"                    \"firstName\": null,",
									"                    \"lastName\": null,",
									"                    \"_id\": \"614c28ecfb0dbf001caad32b\",",
									"                    \"publicAddress\": \"0x67b99531a2ab44f5c71474bd54d07fe78d7c5516\",",
									"                    \"nonce\": \"ibvCPo0aW5v9XSExltdkO\",",
									"                    \"creationDate\": \"2021-09-23T07:12:44.786Z\"",
									"                }",
									"            ],",
									"            \"required\": [",
									"                \"email\",",
									"                \"firstName\",",
									"                \"lastName\",",
									"                \"_id\",",
									"                \"publicAddress\",",
									"                \"nonce\",",
									"                \"creationDate\"",
									"            ],",
									"            \"properties\": {",
									"                \"email\": {",
									"                    \"$id\": \"#/properties/user/properties/email\",",
									"                    \"type\": \"null\",",
									"                    \"title\": \"The email schema\",",
									"                    \"description\": \"An explanation about the purpose of this instance.\",",
									"                    \"default\": null,",
									"                    \"examples\": [",
									"                        null",
									"                    ]",
									"                },",
									"                \"firstName\": {",
									"                    \"$id\": \"#/properties/user/properties/firstName\",",
									"                    \"type\": \"null\",",
									"                    \"title\": \"The firstName schema\",",
									"                    \"description\": \"An explanation about the purpose of this instance.\",",
									"                    \"default\": null,",
									"                    \"examples\": [",
									"                        null",
									"                    ]",
									"                },",
									"                \"lastName\": {",
									"                    \"$id\": \"#/properties/user/properties/lastName\",",
									"                    \"type\": \"null\",",
									"                    \"title\": \"The lastName schema\",",
									"                    \"description\": \"An explanation about the purpose of this instance.\",",
									"                    \"default\": null,",
									"                    \"examples\": [",
									"                        null",
									"                    ]",
									"                },",
									"                \"_id\": {",
									"                    \"$id\": \"#/properties/user/properties/_id\",",
									"                    \"type\": \"string\",",
									"                    \"title\": \"The _id schema\",",
									"                    \"description\": \"An explanation about the purpose of this instance.\",",
									"                    \"default\": \"\",",
									"                    \"examples\": [",
									"                        \"614c28ecfb0dbf001caad32b\"",
									"                    ]",
									"                },",
									"                \"publicAddress\": {",
									"                    \"$id\": \"#/properties/user/properties/publicAddress\",",
									"                    \"type\": \"string\",",
									"                    \"title\": \"The publicAddress schema\",",
									"                    \"description\": \"An explanation about the purpose of this instance.\",",
									"                    \"default\": \"\",",
									"                    \"examples\": [",
									"                        \"0x67b99531a2ab44f5c71474bd54d07fe78d7c5516\"",
									"                    ]",
									"                },",
									"                \"nonce\": {",
									"                    \"$id\": \"#/properties/user/properties/nonce\",",
									"                    \"type\": \"string\",",
									"                    \"title\": \"The nonce schema\",",
									"                    \"description\": \"An explanation about the purpose of this instance.\",",
									"                    \"default\": \"\",",
									"                    \"examples\": [",
									"                        \"ibvCPo0aW5v9XSExltdkO\"",
									"                    ]",
									"                },",
									"                \"creationDate\": {",
									"                    \"$id\": \"#/properties/user/properties/creationDate\",",
									"                    \"type\": \"string\",",
									"                    \"title\": \"The creationDate schema\",",
									"                    \"description\": \"An explanation about the purpose of this instance.\",",
									"                    \"default\": \"\",",
									"                    \"examples\": [",
									"                        \"2021-09-23T07:12:44.786Z\"",
									"                    ]",
									"                }",
									"            },",
									"            \"additionalProperties\": true",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"})",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/users/{{public_key1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"users",
								"{{public_key1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user - publicAddress not provided",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 404\", () => {",
									"    pm.response.to.have.status(404)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/users",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user  - Invalid publicAddress",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 400\", () => {",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"pm.test(\"Response Message\", () => {",
									"    pm.expect(pm.response.json().message).to.contain(\"Invalid user address\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/users/{{public_key_invalid}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"users",
								"{{public_key_invalid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User - adminNFT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 200\", () => {",
									"    pm.response.to.have.status(200)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "self.gif",
									"disabled": true
								},
								{
									"key": "adminNFT",
									"value": "0xa5078ed3f95225fd50d29be172b3c84192c0aee3:0",
									"type": "default"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/users/{{public_key1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"users",
								"{{public_key1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User - avatar",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 200\", () => {",
									"    pm.response.to.have.status(200)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "self.gif"
								},
								{
									"key": "adminNFT",
									"value": "0xa5078ed3f95225fd50d29be172b3c84192c0aee3:0",
									"type": "default",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/users/{{public_key1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"users",
								"{{public_key1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User - nickName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 200\", () => {",
									"    pm.response.to.have.status(200)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "self.gif",
									"disabled": true
								},
								{
									"key": "adminNFT",
									"value": "0xa5078ed3f95225fd50d29be172b3c84192c0aee3:0",
									"type": "default",
									"disabled": true
								},
								{
									"key": "nickName",
									"value": "Suresh",
									"type": "default"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/users/{{public_key1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"users",
								"{{public_key1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User - publicAddress not provided",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 400\", () => {",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"pm.test(\"Response Message\", () => {",
									"    pm.expect(pm.response.json().message).to.equal(\"\\\"publicAddress\\\" is required\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"adminNFT\": \"0xa5078ed3f95225fd50d29be172b3c84192c0aee3:0\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/users",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User -JWT not provided",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 500\", () => {",
									"    pm.response.to.have.status(500)",
									"})",
									"",
									"pm.test(\"Response Message\", () => {",
									"    pm.expect(pm.response.json().message).to.contain(\"jwt must be provided\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"adminNFT\": \"0xa5078ed3f95225fd50d29be172b3c84192c0aee3:0\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/users/{{public_key1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"users",
								"{{public_key1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User -Invalid publicAddress",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 400\", () => {",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"pm.test(\"Response Message\", () => {",
									"    pm.expect(pm.response.json().message).to.contain(\"Invalid user address\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"adminNFT\": \"0x5eB8ad5D00b349DCaF5C357831084eb633563898:0\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/users/{{public_key_invalid}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"users",
								"{{public_key_invalid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User -Not authorised",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 403\", () => {",
									"    pm.response.to.have.status(403)",
									"})",
									"",
									"pm.test(\"Response Message\", () => {",
									"    pm.expect(pm.response.json().message).to.contain(\"You have no permissions for updating user\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT-2}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"adminNFT\": \"0xa5078ed3f95225fd50d29be172b3c84192c0aee3:0\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/users/{{public_key1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"users",
								"{{public_key1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User -email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 200\", () => {",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"suresh@rair.tech\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/users/{{public_key1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"users",
								"{{public_key1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User - nonce",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 400\", () => {",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"pm.test(\"Response Message\", () => {",
									"    pm.expect(pm.response.json().message).to.equal(\"\\\"nonce\\\" is not allowed\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"nonce\": \"BTs3B8k5AR4_agBs12345\",\n    \"adminNFT\": \"0xcfb577c239ae92dcb76bf9f0ac2c668b48f0aef9:0\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/users/{{public_key1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"users",
								"{{public_key1}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Request Auth Challenge",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let messageString = pm.response.json().response",
									"postman.setEnvironmentVariable(\"challenge\", messageString.split('\"')[37])",
									"pm.test(\"Response Code is 200\", () => {",
									"    pm.response.to.have.status(200)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/auth/get_challenge/{{public_key2}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"auth",
								"get_challenge",
								"{{public_key2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request Auth Challenge -Invalid publicAddress",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response Code is 400\", () => {",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"pm.test(\"Response Message\", () => {",
									"    pm.expect(pm.response.json().message).to.equal(\"Invalid MetaAddress\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/auth/get_challenge/{{public_key_invalid}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"auth",
								"get_challenge",
								"{{public_key_invalid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request Auth Challenge -publicAddress not provided",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response Code is 404\", () => {",
									"    pm.response.to.have.status(404)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/auth/get_challenge",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"auth",
								"get_challenge"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Token -mediaID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/auth/get_token/{{challenge}}/{{Signature}}/{{mediaID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"auth",
								"get_token",
								"{{challenge}}",
								"{{Signature}}",
								"{{mediaID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-rair-token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJldGhfYWRkciI6IjB4NjdiOTk1MzFhMmFiNDRmNWM3MTQ3NGJkNTRkMDdmZTc4ZDdjNTUxNiIsImFkbWluUmlnaHRzIjpmYWxzZSwiaWF0IjoxNjMxMzU5NzAzLCJleHAiOjE2MzE0NDYxMDN9.jFGkRyq2eQI8geiuITIZxmaL4LHvn-MC_wPrzCheVCc",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/auth/admin/{{challenge}}/{{MetaSignature}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"auth",
								"admin",
								"{{challenge}}",
								"{{MetaSignature}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify admin user - Challenge not provided",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-rair-token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJldGhfYWRkciI6IjB4NjdiOTk1MzFhMmFiNDRmNWM3MTQ3NGJkNTRkMDdmZTc4ZDdjNTUxNiIsImFkbWluUmlnaHRzIjpmYWxzZSwiaWF0IjoxNjMxMzU5NzAzLCJleHAiOjE2MzE0NDYxMDN9.jFGkRyq2eQI8geiuITIZxmaL4LHvn-MC_wPrzCheVCc",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/auth/admin/{{MetaSignature}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"auth",
								"admin",
								"{{MetaSignature}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify admin user - MetaSignature not provided",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-rair-token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJldGhfYWRkciI6IjB4NjdiOTk1MzFhMmFiNDRmNWM3MTQ3NGJkNTRkMDdmZTc4ZDdjNTUxNiIsImFkbWluUmlnaHRzIjpmYWxzZSwiaWF0IjoxNjMxMzU5NzAzLCJleHAiOjE2MzE0NDYxMDN9.jFGkRyq2eQI8geiuITIZxmaL4LHvn-MC_wPrzCheVCc",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/auth/admin/{{challenge}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"auth",
								"admin",
								"{{challenge}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify user signature",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-rair-token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJldGhfYWRkciI6IjB4NjdiOTk1MzFhMmFiNDRmNWM3MTQ3NGJkNTRkMDdmZTc4ZDdjNTUxNiIsImFkbWluUmlnaHRzIjpmYWxzZSwiaWF0IjoxNjMxMzU5NzAzLCJleHAiOjE2MzE0NDYxMDN9.jFGkRyq2eQI8geiuITIZxmaL4LHvn-MC_wPrzCheVCc",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"publicAddress\": \"{{public_key1}}\",\n    \"signature\": \"{{Signature}}\",\n    \"adminRights\": \"true\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/auth/authentication",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"auth",
								"authentication"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify user signature - Invalid publicAddress",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 400\", () => {",
									"    pm.response.to.have.status(400)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-rair-token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJldGhfYWRkciI6IjB4NjdiOTk1MzFhMmFiNDRmNWM3MTQ3NGJkNTRkMDdmZTc4ZDdjNTUxNiIsImFkbWluUmlnaHRzIjpmYWxzZSwiaWF0IjoxNjMxMzU5NzAzLCJleHAiOjE2MzE0NDYxMDN9.jFGkRyq2eQI8geiuITIZxmaL4LHvn-MC_wPrzCheVCc",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"publicAddress\": \"{{timestamp}}\",\n    \"signature\": \"{{Signature}}\",\n    \"adminRights\": \"true\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/auth/authentication",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"auth",
								"authentication"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user details by JWT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 200\", () => {",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"pm.test(\"Schema Matches\", () => {",
									"    pm.response.to.have.jsonSchema({",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"success\": true,",
									"            \"user\": {",
									"                \"email\": null,",
									"                \"firstName\": null,",
									"                \"lastName\": null,",
									"                \"_id\": \"6156eea84648e0001c780526\",",
									"                \"publicAddress\": \"0xfe88298510efbaf0423b36deca4a01aad265c289\",",
									"                \"creationDate\": \"2021-10-01T11:19:04.642Z\",",
									"                \"adminRights\": true",
									"            }",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"success\",",
									"        \"user\"",
									"    ],",
									"    \"properties\": {",
									"        \"success\": {",
									"            \"$id\": \"#/properties/success\",",
									"            \"type\": \"boolean\",",
									"            \"title\": \"The success schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": false,",
									"            \"examples\": [",
									"                true",
									"            ]",
									"        },",
									"        \"user\": {",
									"            \"$id\": \"#/properties/user\",",
									"            \"type\": \"object\",",
									"            \"title\": \"The user schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": {},",
									"            \"examples\": [",
									"                {",
									"                    \"email\": null,",
									"                    \"firstName\": null,",
									"                    \"lastName\": null,",
									"                    \"_id\": \"6156eea84648e0001c780526\",",
									"                    \"publicAddress\": \"0xfe88298510efbaf0423b36deca4a01aad265c289\",",
									"                    \"creationDate\": \"2021-10-01T11:19:04.642Z\",",
									"                    \"adminRights\": true",
									"                }",
									"            ],",
									"            \"required\": [",
									"                \"email\",",
									"                \"firstName\",",
									"                \"lastName\",",
									"                \"_id\",",
									"                \"publicAddress\",",
									"                \"creationDate\",",
									"                \"adminRights\"",
									"            ],",
									"            \"properties\": {",
									"                \"email\": {",
									"                    \"$id\": \"#/properties/user/properties/email\",",
									"                    \"type\": \"null\",",
									"                    \"title\": \"The email schema\",",
									"                    \"description\": \"An explanation about the purpose of this instance.\",",
									"                    \"default\": null,",
									"                    \"examples\": [",
									"                        null",
									"                    ]",
									"                },",
									"                \"firstName\": {",
									"                    \"$id\": \"#/properties/user/properties/firstName\",",
									"                    \"type\": \"null\",",
									"                    \"title\": \"The firstName schema\",",
									"                    \"description\": \"An explanation about the purpose of this instance.\",",
									"                    \"default\": null,",
									"                    \"examples\": [",
									"                        null",
									"                    ]",
									"                },",
									"                \"lastName\": {",
									"                    \"$id\": \"#/properties/user/properties/lastName\",",
									"                    \"type\": \"null\",",
									"                    \"title\": \"The lastName schema\",",
									"                    \"description\": \"An explanation about the purpose of this instance.\",",
									"                    \"default\": null,",
									"                    \"examples\": [",
									"                        null",
									"                    ]",
									"                },",
									"                \"_id\": {",
									"                    \"$id\": \"#/properties/user/properties/_id\",",
									"                    \"type\": \"string\",",
									"                    \"title\": \"The _id schema\",",
									"                    \"description\": \"An explanation about the purpose of this instance.\",",
									"                    \"default\": \"\",",
									"                    \"examples\": [",
									"                        \"6156eea84648e0001c780526\"",
									"                    ]",
									"                },",
									"                \"publicAddress\": {",
									"                    \"$id\": \"#/properties/user/properties/publicAddress\",",
									"                    \"type\": \"string\",",
									"                    \"title\": \"The publicAddress schema\",",
									"                    \"description\": \"An explanation about the purpose of this instance.\",",
									"                    \"default\": \"\",",
									"                    \"examples\": [",
									"                        \"0xfe88298510efbaf0423b36deca4a01aad265c289\"",
									"                    ]",
									"                },",
									"                \"creationDate\": {",
									"                    \"$id\": \"#/properties/user/properties/creationDate\",",
									"                    \"type\": \"string\",",
									"                    \"title\": \"The creationDate schema\",",
									"                    \"description\": \"An explanation about the purpose of this instance.\",",
									"                    \"default\": \"\",",
									"                    \"examples\": [",
									"                        \"2021-10-01T11:19:04.642Z\"",
									"                    ]",
									"                },",
									"                \"adminRights\": {",
									"                    \"$id\": \"#/properties/user/properties/adminRights\",",
									"                    \"type\": \"boolean\",",
									"                    \"title\": \"The adminRights schema\",",
									"                    \"description\": \"An explanation about the purpose of this instance.\",",
									"                    \"default\": false,",
									"                    \"examples\": [",
									"                        true",
									"                    ]",
									"                }",
									"            },",
									"            \"additionalProperties\": true",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"",
									"})",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/auth/user_info",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"auth",
								"user_info"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user details by JWT - expired JWT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 500\", () => {",
									"    pm.response.to.have.status(500)",
									"})",
									"",
									"pm.test(\"Response Message\", () => {",
									"    pm.expect(pm.response.json().message).to.contain(\"jwt expired\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT-expired}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/auth/user_info",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"auth",
								"user_info"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user details by JWT - JWT NOT provided",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 500\", () => {",
									"    pm.response.to.have.status(500)",
									"})",
									"",
									"pm.test(\"Response Message\", () => {",
									"    pm.expect(pm.response.json().message).to.contain(\"jwt must be provided\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT-expired}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/auth/user_info",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"auth",
								"user_info"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user details by JWT - JWT invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 500\", () => {",
									"    pm.response.to.have.status(500)",
									"})",
									"",
									"pm.test(\"Response Message\", () => {",
									"    pm.expect(pm.response.json().message).to.contain(\"jwt malformed\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT-Invalid}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/auth/user_info",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"auth",
								"user_info"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Media",
			"item": [
				{
					"name": "Get All Media",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 200\", () => {",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"responseJson = JSON.parse(responseBody);",
									"var a=[];",
									"var list1 = (responseJson.list).length;",
									"console.log(list1);",
									"for (var i = 0; i < list1; i++) ",
									"    {",
									"        var counter = responseJson.list[i];",
									"        schID=counter._id",
									"        a.push(schID)",
									"    }",
									"a= JSON.stringify(a)",
									"postman.setEnvironmentVariable(\"schID\", a);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/media/list?pageNum=1",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"media",
								"list"
							],
							"query": [
								{
									"key": "itemsPerPage",
									"value": "25",
									"disabled": true
								},
								{
									"key": "pageNum",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Media - Filtering by Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 200\", () => {",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"//var resObj= pm.response.json();",
									"//var resObj = JSON.parse(responseBody);",
									"",
									"//console.log(pm.response.to.have.)",
									"",
									"// postman.setEnvironmentVariable(\"mediaID\", resObj[0].name)"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/media/list?category=61d3efd5be4a9c001dd49430",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"media",
								"list"
							],
							"query": [
								{
									"key": "category",
									"value": "61d3efd5be4a9c001dd49430"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Media - Filtering by Blockchain",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 200\", () => {",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"//var resObj= pm.response.json();",
									"//var resObj = JSON.parse(responseBody);",
									"",
									"//console.log(pm.response.to.have.)",
									"",
									"// postman.setEnvironmentVariable(\"mediaID\", resObj[0].name)"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/media/list?blockchain=0x5",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"media",
								"list"
							],
							"query": [
								{
									"key": "blockchain",
									"value": "0x5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Media - JWT not provided",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 200\", () => {",
									"    pm.response.to.have.status(200)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/media/list",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"media",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload Media - demo:false - gcp",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 200\", () => {",
									"    pm.response.to.have.status(200)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "video",
									"type": "file",
									"src": "file_example_WEBM_640_1_4MB.webm"
								},
								{
									"key": "title",
									"value": "test_28-webm",
									"type": "text"
								},
								{
									"key": "description",
									"value": "webm test format",
									"type": "text"
								},
								{
									"key": "contract",
									"value": "61e85d02d4e811001ce5dac3",
									"type": "text"
								},
								{
									"key": "product",
									"value": "0",
									"type": "text"
								},
								{
									"key": "offer",
									"value": "[0]",
									"type": "text"
								},
								{
									"key": "category",
									"value": "Science",
									"type": "text"
								},
								{
									"key": "storage",
									"value": "gcp",
									"type": "text"
								},
								{
									"key": "demo",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/media/upload",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"media",
								"upload"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload Media - demo - false - multiple files",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 200\", () => {",
									"    pm.response.to.have.status(200)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "video",
									"type": "file",
									"src": "file_example_WAV_1MG.wav"
								},
								{
									"key": "title",
									"value": "{{title}}",
									"type": "text"
								},
								{
									"key": "description",
									"value": "wav test format",
									"type": "text"
								},
								{
									"key": "contract",
									"value": "61d3f5f88927d6001de380cb",
									"type": "text"
								},
								{
									"key": "product",
									"value": "0",
									"type": "text"
								},
								{
									"key": "offer",
									"value": "[0]",
									"type": "text"
								},
								{
									"key": "category",
									"value": "Science",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/media/upload",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"media",
								"upload"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload Media - demo - false",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 200\", () => {",
									"    pm.response.to.have.status(200)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "video",
									"type": "file",
									"src": "dadara-interview.mp4"
								},
								{
									"key": "title",
									"value": "dadara-interview",
									"type": "text"
								},
								{
									"key": "description",
									"value": "mp4 test format",
									"type": "text"
								},
								{
									"key": "contract",
									"value": "61d345348645ca001c994122",
									"type": "text"
								},
								{
									"key": "product",
									"value": "0",
									"type": "text"
								},
								{
									"key": "offer",
									"value": "[0]",
									"type": "text"
								},
								{
									"key": "category",
									"value": "Science",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/media/upload",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"media",
								"upload"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload Media - demo - true",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 200\", () => {",
									"    pm.response.to.have.status(200)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "video",
									"type": "file",
									"src": "2021-11-27 21-09-28.mkv"
								},
								{
									"key": "title",
									"value": "UI Automation",
									"type": "text"
								},
								{
									"key": "description",
									"value": "automation recording",
									"type": "text"
								},
								{
									"key": "contract",
									"value": "61d3f5f88927d6001de380cb",
									"type": "text"
								},
								{
									"key": "product",
									"value": "0",
									"type": "text"
								},
								{
									"key": "offer",
									"value": "[0]",
									"type": "text"
								},
								{
									"key": "category",
									"value": "Science",
									"type": "text"
								},
								{
									"key": "demo",
									"value": "true",
									"type": "default"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/media/upload",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"media",
								"upload"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload Media - demo - No admin rights",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 403\", () => {",
									"    pm.response.to.have.status(403)",
									"})",
									"",
									"pm.test(\"Response Message\", () => {",
									"    pm.expect(pm.response.json().message).to.equal(\"You don't have permission to upload the files.\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT-4}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "video",
									"type": "file",
									"src": "2021-11-27 21-09-28.mkv"
								},
								{
									"key": "title",
									"value": "UI Automation",
									"type": "text"
								},
								{
									"key": "description",
									"value": "automation recording",
									"type": "text"
								},
								{
									"key": "contract",
									"value": "61d3f5f88927d6001de380cb",
									"type": "text"
								},
								{
									"key": "product",
									"value": "0",
									"type": "text"
								},
								{
									"key": "offer",
									"value": "[0]",
									"type": "text"
								},
								{
									"key": "category",
									"value": "Science",
									"type": "text"
								},
								{
									"key": "demo",
									"value": "true",
									"type": "default"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/media/upload",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"media",
								"upload"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove media",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 200\", () => {",
									"    pm.response.to.have.status(200)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/media/remove/{{mediaID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"media",
								"remove",
								"{{mediaID}}"
							],
							"query": [
								{
									"key": "mediaId",
									"value": "QmY17dNAYg5sgB23aHCQFTSN9npTzqSV6npPToRZf2SUiJ",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove media - JWT not provided",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 500\", () => {",
									"    pm.response.to.have.status(500)",
									"})",
									"",
									"pm.test(\"Response Message\", () => {",
									"    pm.expect(pm.response.json().message).to.equal(\"jwt must be provided\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/media/remove/{{mediaID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"media",
								"remove",
								"{{mediaID}}"
							],
							"query": [
								{
									"key": "mediaId",
									"value": "QmY17dNAYg5sgB23aHCQFTSN9npTzqSV6npPToRZf2SUiJ",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove media - JWT expired",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 500\", () => {",
									"    pm.response.to.have.status(500)",
									"})",
									"",
									"pm.test(\"Response Message\", () => {",
									"    pm.expect(pm.response.json().message).to.equal(\"jwt expired\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT-expired}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/media/remove/QmY17dNAYg5sgB23aHCQFTSN9npTzqSV6npPToRZf2SUiJ",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"media",
								"remove",
								"QmY17dNAYg5sgB23aHCQFTSN9npTzqSV6npPToRZf2SUiJ"
							],
							"query": [
								{
									"key": "mediaId",
									"value": "QmY17dNAYg5sgB23aHCQFTSN9npTzqSV6npPToRZf2SUiJ",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove media - Media not belong to specified user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 403\", () => {",
									"    pm.response.to.have.status(403)",
									"})",
									"",
									"pm.test(\"Response Message\", () => {",
									"    pm.expect(pm.response.json().message).to.equal(\"You don't have permission to manage this file.\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT-2}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/media/remove/{{mediaID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"media",
								"remove",
								"{{mediaID}}"
							],
							"query": [
								{
									"key": "mediaId",
									"value": "QmY17dNAYg5sgB23aHCQFTSN9npTzqSV6npPToRZf2SUiJ",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Register Media",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-rair-token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJldGhfYWRkciI6IjB4NjdiOTk1MzFhMmFiNDRmNWM3MTQ3NGJkNTRkMDdmZTc4ZDdjNTUxNiIsImFkbWluUmlnaHRzIjpmYWxzZSwiaWF0IjoxNjMxMzU5NzAzLCJleHAiOjE2MzE0NDYxMDN9.jFGkRyq2eQI8geiuITIZxmaL4LHvn-MC_wPrzCheVCc",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/media/add/{{IPFS_CID1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"media",
								"add",
								"{{IPFS_CID1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get thumbnails",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 200\", () => {",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"//var resObj= pm.response.json();",
									"//var resObj = JSON.parse(responseBody);",
									"",
									"//console.log(pm.response.to.have.)",
									"",
									"// postman.setEnvironmentVariable(\"mediaID\", resObj[0].name)"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/thumbnails",
							"host": [
								"{{url}}"
							],
							"path": [
								"thumbnails"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Contracts",
			"item": [
				{
					"name": "Create Contract",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response Code is 200\", () => {",
									"    pm.response.to.have.status(200)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"contract2409_6\",\n    \"blockchain\": \"tMATIC\",\n    \"contractAddress\" : \"0x7db0ddfbe383cf6ca1ae91a4f5ad4ceeeb799cb3\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/contracts",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"contracts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Contract -contractAddress not provided",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response Code is 400\", () => {",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"pm.test(\"Response Message\", () => {",
									"    pm.expect(pm.response.json().message).to.equal(\"\\\"contractAddress\\\" is required\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"contract2409_6\",\n    \"blockchain\": \"tMATIC\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/contracts",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"contracts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Contract - jwt not provided",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response Code is 500\", () => {",
									"    pm.response.to.have.status(500)",
									"})",
									"",
									"pm.test(\"Response Message\", () => {",
									"    pm.expect(pm.response.json().message).to.equal(\"jwt must be provided\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"contract2409_5\",\n    \"contractAddress\": \"0xfe88298510efbaf0423b36deca4a01aad265c289\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/contracts",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"contracts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Contract",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response Code is 200\", () => {",
									"    pm.response.to.have.status(200)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contractAddress\": \"0x4069ad3ec45e945544ae13f742a6ee6ecdda7e0a\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/contracts/0x7db0ddfbe383cf6ca1ae91a4f5ad4ceeeb799cb3",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"contracts",
								"0x7db0ddfbe383cf6ca1ae91a4f5ad4ceeeb799cb3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Contracts list - for specific user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"postman.setEnvironmentVariable(\"contract_address\", pm.response.json().contracts[3].contractAddress)",
									"postman.setEnvironmentVariable(\"contract_id\", pm.response.json().contracts[3]._id)",
									"pm.test(\"Response Code is 200\", () => {",
									"    pm.response.to.have.status(200)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/contracts",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"contracts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Contracts list - JWT not provided",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response Code is 500\", () => {",
									"    pm.response.to.have.status(500)",
									"})",
									"",
									"pm.test(\"Response Message\", () => {",
									"    pm.expect(pm.response.json().message).to.equal(\"jwt must be provided\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/contracts",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"contracts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Contracts list - JWT expired",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response Code is 500\", () => {",
									"    pm.response.to.have.status(500)",
									"})",
									"",
									"pm.test(\"Response Message\", () => {",
									"    pm.expect(pm.response.json().message).to.equal(\"jwt expired\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT-expired}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/contracts",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"contracts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Contracts list - JWT Invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response Code is 500\", () => {",
									"    pm.response.to.have.status(500)",
									"})",
									"",
									"pm.test(\"Response Message\", () => {",
									"    pm.expect(pm.response.json().message).to.equal(\"jwt malformed\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT-Invalid}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/contracts",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"contracts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Specific contract",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 200\", () => {",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"pm.test(\"Schema Matches\", () => {",
									"    pm.response.to.have.jsonSchema({",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"success\": true,",
									"            \"contract\": {",
									"                \"_id\": \"615740aed8ea6b001c0d450c\",",
									"                \"user\": \"0xfe88298510efbaf0423b36deca4a01aad265c289\",",
									"                \"title\": \"contract2409_4\",",
									"                \"contractAddress\": \"0x82f9408fe877caf02f1bef48ed7f75f6d34c0ac5\",",
									"                \"blockchain\": \"tMATIC\",",
									"                \"creationDate\": \"2021-10-01T17:09:02.640Z\"",
									"            }",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"success\",",
									"        \"contract\"",
									"    ],",
									"    \"properties\": {",
									"        \"success\": {",
									"            \"$id\": \"#/properties/success\",",
									"            \"type\": \"boolean\",",
									"            \"title\": \"The success schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": false,",
									"            \"examples\": [",
									"                true",
									"            ]",
									"        },",
									"        \"contract\": {",
									"            \"$id\": \"#/properties/contract\",",
									"            \"type\": \"object\",",
									"            \"title\": \"The contract schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": {},",
									"            \"examples\": [",
									"                {",
									"                    \"_id\": \"615740aed8ea6b001c0d450c\",",
									"                    \"user\": \"0xfe88298510efbaf0423b36deca4a01aad265c289\",",
									"                    \"title\": \"contract2409_4\",",
									"                    \"contractAddress\": \"0x82f9408fe877caf02f1bef48ed7f75f6d34c0ac5\",",
									"                    \"blockchain\": \"tMATIC\",",
									"                    \"creationDate\": \"2021-10-01T17:09:02.640Z\"",
									"                }",
									"            ],",
									"            \"required\": [",
									"                \"_id\",",
									"                \"user\",",
									"                \"title\",",
									"                \"contractAddress\",",
									"                \"blockchain\",",
									"                \"creationDate\"",
									"            ],",
									"            \"properties\": {",
									"                \"_id\": {",
									"                    \"$id\": \"#/properties/contract/properties/_id\",",
									"                    \"type\": \"string\",",
									"                    \"title\": \"The _id schema\",",
									"                    \"description\": \"An explanation about the purpose of this instance.\",",
									"                    \"default\": \"\",",
									"                    \"examples\": [",
									"                        \"615740aed8ea6b001c0d450c\"",
									"                    ]",
									"                },",
									"                \"user\": {",
									"                    \"$id\": \"#/properties/contract/properties/user\",",
									"                    \"type\": \"string\",",
									"                    \"title\": \"The user schema\",",
									"                    \"description\": \"An explanation about the purpose of this instance.\",",
									"                    \"default\": \"\",",
									"                    \"examples\": [",
									"                        \"0xfe88298510efbaf0423b36deca4a01aad265c289\"",
									"                    ]",
									"                },",
									"                \"title\": {",
									"                    \"$id\": \"#/properties/contract/properties/title\",",
									"                    \"type\": \"string\",",
									"                    \"title\": \"The title schema\",",
									"                    \"description\": \"An explanation about the purpose of this instance.\",",
									"                    \"default\": \"\",",
									"                    \"examples\": [",
									"                        \"contract2409_4\"",
									"                    ]",
									"                },",
									"                \"contractAddress\": {",
									"                    \"$id\": \"#/properties/contract/properties/contractAddress\",",
									"                    \"type\": \"string\",",
									"                    \"title\": \"The contractAddress schema\",",
									"                    \"description\": \"An explanation about the purpose of this instance.\",",
									"                    \"default\": \"\",",
									"                    \"examples\": [",
									"                        \"0x82f9408fe877caf02f1bef48ed7f75f6d34c0ac5\"",
									"                    ]",
									"                },",
									"                \"blockchain\": {",
									"                    \"$id\": \"#/properties/contract/properties/blockchain\",",
									"                    \"type\": \"string\",",
									"                    \"title\": \"The blockchain schema\",",
									"                    \"description\": \"An explanation about the purpose of this instance.\",",
									"                    \"default\": \"\",",
									"                    \"examples\": [",
									"                        \"tMATIC\"",
									"                    ]",
									"                },",
									"                \"creationDate\": {",
									"                    \"$id\": \"#/properties/contract/properties/creationDate\",",
									"                    \"type\": \"string\",",
									"                    \"title\": \"The creationDate schema\",",
									"                    \"description\": \"An explanation about the purpose of this instance.\",",
									"                    \"default\": \"\",",
									"                    \"examples\": [",
									"                        \"2021-10-01T17:09:02.640Z\"",
									"                    ]",
									"                }",
									"            },",
									"            \"additionalProperties\": true",
									"        }",
									"    },",
									"    \"additionalProperties\": true   ",
									"})",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/contracts/network/0x5/{{contract_address}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"contracts",
								"network",
								"0x5",
								"{{contract_address}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Specific contract - Invalid Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 500\", () => {",
									"    pm.response.to.have.status(500)",
									"})",
									"",
									"pm.test(\"Response Message\", () => {",
									"    pm.expect(pm.response.json().message).to.equal(\"jwt malformed\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT-Invalid}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/contracts/network/0x5/{{contract_address}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"contracts",
								"network",
								"0x5",
								"{{contract_address}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Specific contract - Token Not Provided",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 500\", () => {",
									"    pm.response.to.have.status(500)",
									"})",
									"",
									"pm.test(\"Response Message\", () => {",
									"    pm.expect(pm.response.json().message).to.equal(\"jwt must be provided\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT-Invalid}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/contracts/network/0x5/{{contract_address}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"contracts",
								"network",
								"0x5",
								"{{contract_address}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Specific contract - Token Expired",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 500\", () => {",
									"    pm.response.to.have.status(500)",
									"})",
									"",
									"pm.test(\"Response Message\", () => {",
									"    pm.expect(pm.response.json().message).to.equal(\"jwt expired\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT-expired}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/contracts/network/0x5/{{contract_address}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"contracts",
								"network",
								"0x5",
								"{{contract_address}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Product for a contract",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 200\", () => {",
									"    pm.response.to.have.status(200)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/contracts/network/0x5/{{contract_address}}/products",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"contracts",
								"network",
								"0x5",
								"{{contract_address}}",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Product for a contract -JWT Not provided",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 500\", () => {",
									"    pm.response.to.have.status(500)",
									"})",
									"",
									"pm.test(\"Response Message\", () => {",
									"    pm.expect(pm.response.json().message).to.equal(\"jwt must be provided\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/contracts/network/0x5/{{contract_address}}/products",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"contracts",
								"network",
								"0x5",
								"{{contract_address}}",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Product for a contract -JWT expired",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 500\", () => {",
									"    pm.response.to.have.status(500)",
									"})",
									"",
									"pm.test(\"Response Message\", () => {",
									"    pm.expect(pm.response.json().message).to.equal(\"jwt expired\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT-expired}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/contracts/network/0x5/{{contract_address}}/products",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"contracts",
								"network",
								"0x5",
								"{{contract_address}}",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Product and Offers for a User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 200\", () => {",
									"    pm.response.to.have.status(200)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/contracts/network/0x5/{{contract_address}}/products/offers",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"contracts",
								"network",
								"0x5",
								"{{contract_address}}",
								"products",
								"offers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Product and Offers for a User - JWT expired",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 500\", () => {",
									"    pm.response.to.have.status(500)",
									"})",
									"",
									"pm.test(\"Response Message\", () => {",
									"    pm.expect(pm.response.json().message).to.equal(\"jwt expired\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT-expired}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/contracts/network/0x5/{{contract_address}}/products/offers",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"contracts",
								"network",
								"0x5",
								"{{contract_address}}",
								"products",
								"offers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Product and Offers for a User - JWT not provided",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 500\", () => {",
									"    pm.response.to.have.status(500)",
									"})",
									"",
									"pm.test(\"Response Message\", () => {",
									"    pm.expect(pm.response.json().message).to.equal(\"jwt must be provided\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT-expired}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/contracts/network/0x13881/{{contract_address}}/products/offers",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"contracts",
								"network",
								"0x13881",
								"{{contract_address}}",
								"products",
								"offers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Product and Offers for a User - JWT Invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 500\", () => {",
									"    pm.response.to.have.status(500)",
									"})",
									"",
									"pm.test(\"Response Message\", () => {",
									"    pm.expect(pm.response.json().message).to.equal(\"jwt malformed\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT-Invalid}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/contracts/network/0x13881/{{contract_address}}/products/offers",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"contracts",
								"network",
								"0x13881",
								"{{contract_address}}",
								"products",
								"offers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Full Contracts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 200\", () => {",
									"    pm.response.to.have.status(200)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/contracts/full",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"contracts",
								"full"
							],
							"query": [
								{
									"key": "blockchain",
									"value": "0x61",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get single contract by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 200\", () => {",
									"    pm.response.to.have.status(200)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/contracts/singleContract/{{contract_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"contracts",
								"singleContract",
								"{{contract_id}}"
							],
							"query": [
								{
									"key": "blockchain",
									"value": "0x61",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Full Contracts -  Filtering by Blockchain",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 200\", () => {",
									"    pm.response.to.have.status(200)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/contracts/full?blockchain=0x5",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"contracts",
								"full"
							],
							"query": [
								{
									"key": "blockchain",
									"value": "0x5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Full Contracts - Filtering by Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 200\", () => {",
									"    pm.response.to.have.status(200)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/contracts/full?category=61d3efd5be4a9c001dd49430",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"contracts",
								"full"
							],
							"query": [
								{
									"key": "category",
									"value": "61d3efd5be4a9c001dd49430"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Full Contracts - Sort",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 200\", () => {",
									"    pm.response.to.have.status(200)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/contracts/full",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"contracts",
								"full"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "title",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Locks for Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 200\", () => {",
									"    pm.response.to.have.status(200)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/nft/0x85154b8bf04716ef01330b5250aabf5b4c33b0d8/3/locks",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"nft",
								"0x85154b8bf04716ef01330b5250aabf5b4c33b0d8",
								"3",
								"locks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Locks for Product - invalid contract address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 200\", () => {",
									"    pm.response.to.have.status(200)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/nft/0x85154b8bf04716ef01330b5250aabf5b4c33b0d/3/locks",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"nft",
								"0x85154b8bf04716ef01330b5250aabf5b4c33b0d",
								"3",
								"locks"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Tokens",
			"item": [
				{
					"name": "Get CSV sample file",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 200\", () => {",
									"    pm.response.to.have.status(200)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/nft/csv/sample",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"nft",
								"csv",
								"sample"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Product tokens",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 200\", () => {",
									"    pm.response.to.have.status(200)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/nft/network/0x5/{{contract_address}}/0?limit=3&fromToken=0",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"nft",
								"network",
								"0x5",
								"{{contract_address}}",
								"0"
							],
							"query": [
								{
									"key": "limit",
									"value": "3"
								},
								{
									"key": "fromToken",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Product tokens -RAIR-2554",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 200\", () => {",
									"    pm.response.to.have.status(200)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/nft/network/0x5/{{contract_address}}/0?fromToken=1&toToken=3",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"nft",
								"network",
								"0x5",
								"{{contract_address}}",
								"0"
							],
							"query": [
								{
									"key": "fromToken",
									"value": "1"
								},
								{
									"key": "toToken",
									"value": "3"
								},
								{
									"key": "limit",
									"value": "20",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Product token Numbers -RAIR-2554",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 200\", () => {",
									"    pm.response.to.have.status(200)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/nft/network/0x5/{{contract_address}}/0/tokenNumbers",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"nft",
								"network",
								"0x5",
								"{{contract_address}}",
								"0",
								"tokenNumbers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get full product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 200\", () => {",
									"    pm.response.to.have.status(200)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/3/GreymanTest/population",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"3",
								"GreymanTest",
								"population"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get full product -Invalid adminNFT Contract combination",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 404\", () => {",
									"    pm.response.to.have.status(404)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/0/suresh-26102021_1/product-1",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"0",
								"suresh-26102021_1",
								"product-1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get specific product with all offers - RAIR-2229",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 200\", () => {",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"pm.test(\"Schema Matches\", () => {",
									"    pm.response.to.have.jsonSchema({",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"success\": true,",
									"            \"product\": {",
									"                \"_id\": \"617975ba579af6001b930ab2\",",
									"                \"soldCopies\": 1,",
									"                \"sold\": false,",
									"                \"royalty\": 0,",
									"                \"cover\": \"https://rair.mypinata.cloud/ipfs/QmNtfjBAPYEFxXiHmY5kcPh9huzkwquHBcn9ZJHGe7hfaW\",",
									"                \"contract\": \"0x0c658855944afdbd8b80c82624c932d802e86ca0\",",
									"                \"collectionIndexInContract\": 0,",
									"                \"name\": \"product4_1\",",
									"                \"copies\": 10,",
									"                \"firstTokenIndex\": 0,",
									"                \"creationDate\": \"2021-10-27T15:52:26.476Z\",",
									"                \"offers\": [",
									"                    {",
									"                        \"_id\": \"617975bd579af6001b930bc0\",",
									"                        \"soldCopies\": 1,",
									"                        \"sold\": false,",
									"                        \"range\": [",
									"                            0,",
									"                            9",
									"                        ],",
									"                        \"offerName\": \"offer-1\",",
									"                        \"offerIndex\": 0,",
									"                        \"contract\": \"0x0c658855944afdbd8b80c82624c932d802e86ca0\",",
									"                        \"product\": 0,",
									"                        \"offerPool\": 5,",
									"                        \"price\": 60,",
									"                        \"copies\": 10,",
									"                        \"creationDate\": \"2021-10-27T15:52:29.060Z\"",
									"                    }",
									"                ]",
									"            }",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"success\",",
									"        \"product\"",
									"    ],",
									"    \"properties\": {",
									"        \"success\": {",
									"            \"$id\": \"#/properties/success\",",
									"            \"type\": \"boolean\",",
									"            \"title\": \"The success schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": false,",
									"            \"examples\": [",
									"                true",
									"            ]",
									"        },",
									"        \"product\": {",
									"            \"$id\": \"#/properties/product\",",
									"            \"type\": \"object\",",
									"            \"title\": \"The product schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": {},",
									"            \"examples\": [",
									"                {",
									"                    \"_id\": \"617975ba579af6001b930ab2\",",
									"                    \"soldCopies\": 1,",
									"                    \"sold\": false,",
									"                    \"royalty\": 0,",
									"                    \"cover\": \"https://rair.mypinata.cloud/ipfs/QmNtfjBAPYEFxXiHmY5kcPh9huzkwquHBcn9ZJHGe7hfaW\",",
									"                    \"contract\": \"0x0c658855944afdbd8b80c82624c932d802e86ca0\",",
									"                    \"collectionIndexInContract\": 0,",
									"                    \"name\": \"product4_1\",",
									"                    \"copies\": 10,",
									"                    \"firstTokenIndex\": 0,",
									"                    \"creationDate\": \"2021-10-27T15:52:26.476Z\",",
									"                    \"offers\": [",
									"                        {",
									"                            \"_id\": \"617975bd579af6001b930bc0\",",
									"                            \"soldCopies\": 1,",
									"                            \"sold\": false,",
									"                            \"range\": [",
									"                                0,",
									"                                9",
									"                            ],",
									"                            \"offerName\": \"offer-1\",",
									"                            \"offerIndex\": 0,",
									"                            \"contract\": \"0x0c658855944afdbd8b80c82624c932d802e86ca0\",",
									"                            \"product\": 0,",
									"                            \"offerPool\": 5,",
									"                            \"price\": 60,",
									"                            \"copies\": 10,",
									"                            \"creationDate\": \"2021-10-27T15:52:29.060Z\"",
									"                        }",
									"                    ]",
									"                }",
									"            ],",
									"            \"required\": [",
									"                \"_id\",",
									"                \"soldCopies\",",
									"                \"sold\",",
									"                \"royalty\",",
									"                \"cover\",",
									"                \"contract\",",
									"                \"collectionIndexInContract\",",
									"                \"name\",",
									"                \"copies\",",
									"                \"firstTokenIndex\",",
									"                \"creationDate\",",
									"                \"offers\"",
									"            ],",
									"            \"properties\": {",
									"                \"_id\": {",
									"                    \"$id\": \"#/properties/product/properties/_id\",",
									"                    \"type\": \"string\",",
									"                    \"title\": \"The _id schema\",",
									"                    \"description\": \"An explanation about the purpose of this instance.\",",
									"                    \"default\": \"\",",
									"                    \"examples\": [",
									"                        \"617975ba579af6001b930ab2\"",
									"                    ]",
									"                },",
									"                \"soldCopies\": {",
									"                    \"$id\": \"#/properties/product/properties/soldCopies\",",
									"                    \"type\": \"integer\",",
									"                    \"title\": \"The soldCopies schema\",",
									"                    \"description\": \"An explanation about the purpose of this instance.\",",
									"                    \"default\": 0,",
									"                    \"examples\": [",
									"                        1",
									"                    ]",
									"                },",
									"                \"sold\": {",
									"                    \"$id\": \"#/properties/product/properties/sold\",",
									"                    \"type\": \"boolean\",",
									"                    \"title\": \"The sold schema\",",
									"                    \"description\": \"An explanation about the purpose of this instance.\",",
									"                    \"default\": false,",
									"                    \"examples\": [",
									"                        false",
									"                    ]",
									"                },",
									"                \"royalty\": {",
									"                    \"$id\": \"#/properties/product/properties/royalty\",",
									"                    \"type\": \"integer\",",
									"                    \"title\": \"The royalty schema\",",
									"                    \"description\": \"An explanation about the purpose of this instance.\",",
									"                    \"default\": 0,",
									"                    \"examples\": [",
									"                        0",
									"                    ]",
									"                },",
									"                \"cover\": {",
									"                    \"$id\": \"#/properties/product/properties/cover\",",
									"                    \"type\": \"string\",",
									"                    \"title\": \"The cover schema\",",
									"                    \"description\": \"An explanation about the purpose of this instance.\",",
									"                    \"default\": \"\",",
									"                    \"examples\": [",
									"                        \"https://rair.mypinata.cloud/ipfs/QmNtfjBAPYEFxXiHmY5kcPh9huzkwquHBcn9ZJHGe7hfaW\"",
									"                    ]",
									"                },",
									"                \"contract\": {",
									"                    \"$id\": \"#/properties/product/properties/contract\",",
									"                    \"type\": \"string\",",
									"                    \"title\": \"The contract schema\",",
									"                    \"description\": \"An explanation about the purpose of this instance.\",",
									"                    \"default\": \"\",",
									"                    \"examples\": [",
									"                        \"0x0c658855944afdbd8b80c82624c932d802e86ca0\"",
									"                    ]",
									"                },",
									"                \"collectionIndexInContract\": {",
									"                    \"$id\": \"#/properties/product/properties/collectionIndexInContract\",",
									"                    \"type\": \"integer\",",
									"                    \"title\": \"The collectionIndexInContract schema\",",
									"                    \"description\": \"An explanation about the purpose of this instance.\",",
									"                    \"default\": 0,",
									"                    \"examples\": [",
									"                        0",
									"                    ]",
									"                },",
									"                \"name\": {",
									"                    \"$id\": \"#/properties/product/properties/name\",",
									"                    \"type\": \"string\",",
									"                    \"title\": \"The name schema\",",
									"                    \"description\": \"An explanation about the purpose of this instance.\",",
									"                    \"default\": \"\",",
									"                    \"examples\": [",
									"                        \"product4_1\"",
									"                    ]",
									"                },",
									"                \"copies\": {",
									"                    \"$id\": \"#/properties/product/properties/copies\",",
									"                    \"type\": \"integer\",",
									"                    \"title\": \"The copies schema\",",
									"                    \"description\": \"An explanation about the purpose of this instance.\",",
									"                    \"default\": 0,",
									"                    \"examples\": [",
									"                        10",
									"                    ]",
									"                },",
									"                \"firstTokenIndex\": {",
									"                    \"$id\": \"#/properties/product/properties/firstTokenIndex\",",
									"                    \"type\": \"integer\",",
									"                    \"title\": \"The firstTokenIndex schema\",",
									"                    \"description\": \"An explanation about the purpose of this instance.\",",
									"                    \"default\": 0,",
									"                    \"examples\": [",
									"                        0",
									"                    ]",
									"                },",
									"                \"creationDate\": {",
									"                    \"$id\": \"#/properties/product/properties/creationDate\",",
									"                    \"type\": \"string\",",
									"                    \"title\": \"The creationDate schema\",",
									"                    \"description\": \"An explanation about the purpose of this instance.\",",
									"                    \"default\": \"\",",
									"                    \"examples\": [",
									"                        \"2021-10-27T15:52:26.476Z\"",
									"                    ]",
									"                },",
									"                \"offers\": {",
									"                    \"$id\": \"#/properties/product/properties/offers\",",
									"                    \"type\": \"array\",",
									"                    \"title\": \"The offers schema\",",
									"                    \"description\": \"An explanation about the purpose of this instance.\",",
									"                    \"default\": [],",
									"                    \"examples\": [",
									"                        [",
									"                            {",
									"                                \"_id\": \"617975bd579af6001b930bc0\",",
									"                                \"soldCopies\": 1,",
									"                                \"sold\": false,",
									"                                \"range\": [",
									"                                    0,",
									"                                    9",
									"                                ],",
									"                                \"offerName\": \"offer-1\",",
									"                                \"offerIndex\": 0,",
									"                                \"contract\": \"0x0c658855944afdbd8b80c82624c932d802e86ca0\",",
									"                                \"product\": 0,",
									"                                \"offerPool\": 5,",
									"                                \"price\": 60,",
									"                                \"copies\": 10,",
									"                                \"creationDate\": \"2021-10-27T15:52:29.060Z\"",
									"                            }",
									"                        ]",
									"                    ],",
									"                    \"additionalItems\": true,",
									"                    \"items\": {",
									"                        \"$id\": \"#/properties/product/properties/offers/items\",",
									"                        \"anyOf\": [",
									"                            {",
									"                                \"$id\": \"#/properties/product/properties/offers/items/anyOf/0\",",
									"                                \"type\": \"object\",",
									"                                \"title\": \"The first anyOf schema\",",
									"                                \"description\": \"An explanation about the purpose of this instance.\",",
									"                                \"default\": {},",
									"                                \"examples\": [",
									"                                    {",
									"                                        \"_id\": \"617975bd579af6001b930bc0\",",
									"                                        \"soldCopies\": 1,",
									"                                        \"sold\": false,",
									"                                        \"range\": [",
									"                                            0,",
									"                                            9",
									"                                        ],",
									"                                        \"offerName\": \"offer-1\",",
									"                                        \"offerIndex\": 0,",
									"                                        \"contract\": \"0x0c658855944afdbd8b80c82624c932d802e86ca0\",",
									"                                        \"product\": 0,",
									"                                        \"offerPool\": 5,",
									"                                        \"price\": 60,",
									"                                        \"copies\": 10,",
									"                                        \"creationDate\": \"2021-10-27T15:52:29.060Z\"",
									"                                    }",
									"                                ],",
									"                                \"required\": [",
									"                                    \"_id\",",
									"                                    \"soldCopies\",",
									"                                    \"sold\",",
									"                                    \"range\",",
									"                                    \"offerName\",",
									"                                    \"offerIndex\",",
									"                                    \"contract\",",
									"                                    \"product\",",
									"                                    \"offerPool\",",
									"                                    \"price\",",
									"                                    \"copies\",",
									"                                    \"creationDate\"",
									"                                ],",
									"                                \"properties\": {",
									"                                    \"_id\": {",
									"                                        \"$id\": \"#/properties/product/properties/offers/items/anyOf/0/properties/_id\",",
									"                                        \"type\": \"string\",",
									"                                        \"title\": \"The _id schema\",",
									"                                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                                        \"default\": \"\",",
									"                                        \"examples\": [",
									"                                            \"617975bd579af6001b930bc0\"",
									"                                        ]",
									"                                    },",
									"                                    \"soldCopies\": {",
									"                                        \"$id\": \"#/properties/product/properties/offers/items/anyOf/0/properties/soldCopies\",",
									"                                        \"type\": \"integer\",",
									"                                        \"title\": \"The soldCopies schema\",",
									"                                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                                        \"default\": 0,",
									"                                        \"examples\": [",
									"                                            1",
									"                                        ]",
									"                                    },",
									"                                    \"sold\": {",
									"                                        \"$id\": \"#/properties/product/properties/offers/items/anyOf/0/properties/sold\",",
									"                                        \"type\": \"boolean\",",
									"                                        \"title\": \"The sold schema\",",
									"                                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                                        \"default\": false,",
									"                                        \"examples\": [",
									"                                            false",
									"                                        ]",
									"                                    },",
									"                                    \"range\": {",
									"                                        \"$id\": \"#/properties/product/properties/offers/items/anyOf/0/properties/range\",",
									"                                        \"type\": \"array\",",
									"                                        \"title\": \"The range schema\",",
									"                                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                                        \"default\": [],",
									"                                        \"examples\": [",
									"                                            [",
									"                                                0,",
									"                                                9",
									"                                            ]",
									"                                        ],",
									"                                        \"additionalItems\": true,",
									"                                        \"items\": {",
									"                                            \"$id\": \"#/properties/product/properties/offers/items/anyOf/0/properties/range/items\",",
									"                                            \"anyOf\": [",
									"                                                {",
									"                                                    \"$id\": \"#/properties/product/properties/offers/items/anyOf/0/properties/range/items/anyOf/0\",",
									"                                                    \"type\": \"integer\",",
									"                                                    \"title\": \"The first anyOf schema\",",
									"                                                    \"description\": \"An explanation about the purpose of this instance.\",",
									"                                                    \"default\": 0,",
									"                                                    \"examples\": [",
									"                                                        0,",
									"                                                        9",
									"                                                    ]",
									"                                                }",
									"                                            ]",
									"                                        }",
									"                                    },",
									"                                    \"offerName\": {",
									"                                        \"$id\": \"#/properties/product/properties/offers/items/anyOf/0/properties/offerName\",",
									"                                        \"type\": \"string\",",
									"                                        \"title\": \"The offerName schema\",",
									"                                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                                        \"default\": \"\",",
									"                                        \"examples\": [",
									"                                            \"offer-1\"",
									"                                        ]",
									"                                    },",
									"                                    \"offerIndex\": {",
									"                                        \"$id\": \"#/properties/product/properties/offers/items/anyOf/0/properties/offerIndex\",",
									"                                        \"type\": \"integer\",",
									"                                        \"title\": \"The offerIndex schema\",",
									"                                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                                        \"default\": 0,",
									"                                        \"examples\": [",
									"                                            0",
									"                                        ]",
									"                                    },",
									"                                    \"contract\": {",
									"                                        \"$id\": \"#/properties/product/properties/offers/items/anyOf/0/properties/contract\",",
									"                                        \"type\": \"string\",",
									"                                        \"title\": \"The contract schema\",",
									"                                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                                        \"default\": \"\",",
									"                                        \"examples\": [",
									"                                            \"0x0c658855944afdbd8b80c82624c932d802e86ca0\"",
									"                                        ]",
									"                                    },",
									"                                    \"product\": {",
									"                                        \"$id\": \"#/properties/product/properties/offers/items/anyOf/0/properties/product\",",
									"                                        \"type\": \"integer\",",
									"                                        \"title\": \"The product schema\",",
									"                                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                                        \"default\": 0,",
									"                                        \"examples\": [",
									"                                            0",
									"                                        ]",
									"                                    },",
									"                                    \"offerPool\": {",
									"                                        \"$id\": \"#/properties/product/properties/offers/items/anyOf/0/properties/offerPool\",",
									"                                        \"type\": \"integer\",",
									"                                        \"title\": \"The offerPool schema\",",
									"                                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                                        \"default\": 0,",
									"                                        \"examples\": [",
									"                                            5",
									"                                        ]",
									"                                    },",
									"                                    \"price\": {",
									"                                        \"$id\": \"#/properties/product/properties/offers/items/anyOf/0/properties/price\",",
									"                                        \"type\": \"integer\",",
									"                                        \"title\": \"The price schema\",",
									"                                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                                        \"default\": 0,",
									"                                        \"examples\": [",
									"                                            60",
									"                                        ]",
									"                                    },",
									"                                    \"copies\": {",
									"                                        \"$id\": \"#/properties/product/properties/offers/items/anyOf/0/properties/copies\",",
									"                                        \"type\": \"integer\",",
									"                                        \"title\": \"The copies schema\",",
									"                                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                                        \"default\": 0,",
									"                                        \"examples\": [",
									"                                            10",
									"                                        ]",
									"                                    },",
									"                                    \"creationDate\": {",
									"                                        \"$id\": \"#/properties/product/properties/offers/items/anyOf/0/properties/creationDate\",",
									"                                        \"type\": \"string\",",
									"                                        \"title\": \"The creationDate schema\",",
									"                                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                                        \"default\": \"\",",
									"                                        \"examples\": [",
									"                                            \"2021-10-27T15:52:29.060Z\"",
									"                                        ]",
									"                                    }",
									"                                },",
									"                                \"additionalProperties\": true",
									"                            }",
									"                        ]",
									"                    }",
									"                }",
									"            },",
									"            \"additionalProperties\": true",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"",
									"})",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/nft/{{contract_address}}/0/offers",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"nft",
								"{{contract_address}}",
								"0",
								"offers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get specific product with all offers - Non-existing product - RAIR-2229",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 200\", () => {",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"pm.test(\"Response Message\", () => {",
									"    pm.expect(pm.response.json().message).to.contain(\"Product not found.\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/nft/{{contract_address}}/1/offers",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"nft",
								"{{contract_address}}",
								"1",
								"offers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get specific product with all offers - Non-existing contract - RAIR-2229",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 200\", () => {",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"pm.test(\"Response Message\", () => {",
									"    pm.expect(pm.response.json().message).to.contain(\"Product not found.\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/nft/0xcfb577c239ae92dcb76bf9f0ac2c668b48f0aef8/0/offers",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"nft",
								"0xcfb577c239ae92dcb76bf9f0ac2c668b48f0aef8",
								"0",
								"offers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get specific product with all offers - No Offers created - RAIR-2229",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 200\", () => {",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/nft/0xb8C68870CCf9c61C9696797a3150727E5e6c1C56/0/offers",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"nft",
								"0xb8C68870CCf9c61C9696797a3150727E5e6c1C56",
								"0",
								"offers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all tokens for user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 200\", () => {",
									"    pm.response.to.have.status(200)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/nft",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"nft"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all tokens for user - expired JWT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 500\", () => {",
									"    pm.response.to.have.status(500)",
									"})",
									"",
									"pm.test(\"Response Message\", () => {",
									"    pm.expect(pm.response.json().message).to.equal(\"jwt expired\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT-expired}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/nft",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"nft"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all tokens for user - Invalid JWT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 500\", () => {",
									"    pm.response.to.have.status(500)",
									"})",
									"",
									"pm.test(\"Response Message\", () => {",
									"    pm.expect(pm.response.json().message).to.contain(\"jwt malformed\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT-Invalid}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/nft",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"nft"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all tokens for user - JWT missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 500\", () => {",
									"    pm.response.to.have.status(500)",
									"})",
									"",
									"pm.test(\"Response Message\", () => {",
									"    pm.expect(pm.response.json().message).to.contain(\"jwt must be provided\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT-Invalid}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/nft",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"nft"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get specific token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 200\", () => {",
									"    pm.response.to.have.status(200)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT-2}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/nft/{{contract_address}}/8/token/8",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"nft",
								"{{contract_address}}",
								"8",
								"token",
								"8"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get specific token by contract and unique ID",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/nft/{{contract_address}}/token/1",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"nft",
								"{{contract_address}}",
								"token",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get token metadata",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/suresh-04\\/10/\\2021 19:35:46/collection-04\\/10\\/2021 19:47:21/test_offer/0",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"suresh-04",
								"",
								"10",
								"",
								"2021 19:35:46",
								"collection-04",
								"",
								"10",
								"",
								"2021 19:47:21",
								"test_offer",
								"0"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get token metadata - RAIR-2139",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 200\", () => {",
									"    pm.response.to.have.status(200)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/3/suresh-19112021_1/product-9_suresh19112021_1",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"3",
								"suresh-19112021_1",
								"product-9_suresh19112021_1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get token metadata - RAIR-2139 - No Tokens exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 404\", () => {",
									"    pm.response.to.have.status(404)",
									"})",
									"",
									"pm.test(\"Response Message\", () => {",
									"    pm.expect(pm.response.json().message).to.contain(\"Tokens not found.\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/0/suresh-08102021_100135/product-5",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"0",
								"suresh-08102021_100135",
								"product-5"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get token metadata - RAIR-2139 - Different Contract_same_Blockchain",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 200\", () => {",
									"    pm.response.to.have.status(200)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/0/suresh-08102021_100135/product-4",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"0",
								"suresh-08102021_100135",
								"product-4"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get token metadata - RAIR-2139 - Different Contract_same_Blockchain Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 200\", () => {",
									"    pm.response.to.have.status(200)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/0/contract-Oct1_1/product-4",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"0",
								"contract-Oct1_1",
								"product-4"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get token metadata - RAIR-2139 - incorrect adminToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 404\", () => {",
									"    pm.response.to.have.status(404)",
									"})",
									"",
									"pm.test(\"Response Message\", () => {",
									"    pm.expect(pm.response.json().message).to.contain(\"User not found.\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/1/suresh-06102021_123353/product-1",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"1",
								"suresh-06102021_123353",
								"product-1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get token metadata - RAIR-2139 - incorrect productName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 404\", () => {",
									"    pm.response.to.have.status(404)",
									"})",
									"",
									"pm.test(\"Response Message\", () => {",
									"    pm.expect(pm.response.json().message).to.contain(\"Product or contract not found.\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/0/suresh-06102021_123353/product-2",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"0",
								"suresh-06102021_123353",
								"product-2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get token metadata - RAIR-2139 - incorrect contractName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 404\", () => {",
									"    pm.response.to.have.status(404)",
									"})",
									"",
									"pm.test(\"Response Message\", () => {",
									"    pm.expect(pm.response.json().message).to.contain(\"Product or contract not found.\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/0/suresh-06102021_123352/product-1",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"0",
								"suresh-06102021_123352",
								"product-1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get files by NFT",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/nft/{{contract_address}}/0/files/0",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"nft",
								"{{contract_address}}",
								"0",
								"files",
								"0"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get files by product",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/nft/network/0x5/{{contract_address}}/0/files",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"nft",
								"network",
								"0x5",
								"{{contract_address}}",
								"0",
								"files"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update specific token metadata by internal token ID : isMinted = true",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"ADVENTURES OF BANQ BOY #0\",\n  \"description\": \"Updated name\",\n  \"artist\": \"Suresh-0\",\n  \"external_url\": \"https:///0/suresh-Goerli_28122021-1/Product-1/offer-1/0\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/nft/network/0x5/{{contract_address}}/0/token/0",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"nft",
								"network",
								"0x5",
								"{{contract_address}}",
								"0",
								"token",
								"0"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update specific token metadata by internal token ID : isMinted - false",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"ADVENTURES OF BANQ BOY #6\",\n  \"description\": \"Updated name\",\n  \"artist\": \"Suresh-6\",\n  \"external_url\": \"https:///0/suresh-Goerli_28122021-1/Product-1/offer-1/6\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/nft/network/0x5/{{contract_address}}/0/token/6",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"nft",
								"network",
								"0x5",
								"{{contract_address}}",
								"0",
								"token",
								"6"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update specific token metadata by internal token ID : isMinted - false Copy",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "files",
									"type": "file",
									"src": "Photo3.jpg"
								},
								{
									"key": "image",
									"value": "Photo3.jpg",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/nft/network/0x13881/{{contract_address}}/0/token/1",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"nft",
								"network",
								"0x13881",
								"{{contract_address}}",
								"0",
								"token",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update specific token metadata by internal token ID - not owner",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 403\", () => {",
									"    pm.response.to.have.status(403)",
									"})",
									"",
									"pm.test(\"Response Message\", () => {",
									"    pm.expect(pm.response.json().message).contains(\"You have no permissions for updating\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT-2}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"ADVENTURES OF BANQ BOY #0\",\n  \"description\": \"Updated name\",\n  \"artist\": \"YunkFunk\",\n  \"external_url\": \"https:///0/suresh-Goerli_28122021-1/Product-1/offer-1/0\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/nft/network/0x5/{{contract_address}}/0/token/1",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"nft",
								"network",
								"0x5",
								"{{contract_address}}",
								"0",
								"token",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pin token metadata to IPFS cloud - : isMinted - true",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 200\", () => {",
									"    pm.response.to.have.status(200)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/nft/network/0x13881/{{contract_address}}/0/token/1/pinning",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"nft",
								"network",
								"0x13881",
								"{{contract_address}}",
								"0",
								"token",
								"1",
								"pinning"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pin token metadata to IPFS cloud: : isMinted - false",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 400\", () => {",
									"    pm.response.to.have.status(400)",
									"})",
									"pm.test(\"Response Message\", () => {",
									"    pm.expect(pm.response.json().message).contains(\"Token not minted\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/nft/network/0x5/{{contract_address}}/1/token/301/pinning",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"nft",
								"network",
								"0x5",
								"{{contract_address}}",
								"1",
								"token",
								"301",
								"pinning"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pin token metadata to IPFS cloud  - not owner",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 403\", () => {",
									"    pm.response.to.have.status(403)",
									"})",
									"",
									"pm.test(\"Response Message\", () => {",
									"    pm.expect(pm.response.json().message).contains(\"You have no permissions for updating\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT-2}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/nft/network/0x5/{{contract_address}}/0/token/0/pinning",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"nft",
								"network",
								"0x5",
								"{{contract_address}}",
								"0",
								"token",
								"0",
								"pinning"
							]
						}
					},
					"response": []
				},
				{
					"name": "Bulk Create NFT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Code is 200\", () => {",
									"    pm.response.to.have.status(200)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-rair-token",
								"value": "{{JWT}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "csv",
									"type": "file",
									"src": "latest.csv"
								},
								{
									"key": "contract",
									"value": "{{contract_id}}",
									"type": "text"
								},
								{
									"key": "product",
									"value": "0",
									"type": "text"
								},
								{
									"key": "updateMeta",
									"value": "true",
									"type": "text"
								},
								{
									"key": "blockchain",
									"value": "0x13881",
									"type": "default"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/nft",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"nft"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Search - Products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response Code is 200\", () => {",
							"    pm.response.to.have.status(200)",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"searchString\": \"Holiday\",\n    \"searchBy\": \"products\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/search",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"search"
					]
				}
			},
			"response": []
		},
		{
			"name": "Search - Files by title",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response Code is 200\", () => {",
							"    pm.response.to.have.status(200)",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"searchString\": \"test_\",\n    \"searchBy\": \"files\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/search",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"search"
					]
				}
			},
			"response": []
		},
		{
			"name": "Search - Files by description",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response Code is 200\", () => {",
							"    pm.response.to.have.status(200)",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"searchString\": \"webm\",\n    \"searchBy\": \"files\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/search",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"search"
					]
				}
			},
			"response": []
		},
		{
			"name": "Search - User by nickname",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response Code is 200\", () => {",
							"    pm.response.to.have.status(200)",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"searchString\": \"Suresh\",\n    \"searchBy\": \"users\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/search",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"search"
					]
				}
			},
			"response": []
		},
		{
			"name": "Search - User by publicAddress",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response Code is 200\", () => {",
							"    pm.response.to.have.status(200)",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"searchString\": \"0x67B99\",\n    \"searchBy\": \"users\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/search",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"search"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Blockchains",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response Code is 200\", () => {",
							"    pm.response.to.have.status(200)",
							"})",
							"",
							"pm.test(\"Schema Matches\", () => {",
							"    pm.response.to.have.jsonSchema({",
							"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
							"    \"$id\": \"http://example.com/example.json\",",
							"    \"type\": \"object\",",
							"    \"title\": \"The root schema\",",
							"    \"description\": \"The root schema comprises the entire JSON document.\",",
							"    \"default\": {},",
							"    \"examples\": [",
							"        {",
							"            \"success\": true,",
							"            \"blockchains\": [",
							"                {",
							"                    \"_id\": \"61b6310265e983001cef0c37\",",
							"                    \"name\": \"Binance Testnet\",",
							"                    \"hash\": \"0x61\"",
							"                }",
							"            ]",
							"        }",
							"    ],",
							"    \"required\": [",
							"        \"success\",",
							"        \"blockchains\"",
							"    ],",
							"    \"properties\": {",
							"        \"success\": {",
							"            \"$id\": \"#/properties/success\",",
							"            \"type\": \"boolean\",",
							"            \"title\": \"The success schema\",",
							"            \"description\": \"An explanation about the purpose of this instance.\",",
							"            \"default\": false,",
							"            \"examples\": [",
							"                true",
							"            ]",
							"        },",
							"        \"blockchains\": {",
							"            \"$id\": \"#/properties/blockchains\",",
							"            \"type\": \"array\",",
							"            \"title\": \"The blockchains schema\",",
							"            \"description\": \"An explanation about the purpose of this instance.\",",
							"            \"default\": [],",
							"            \"examples\": [",
							"                [",
							"                    {",
							"                        \"_id\": \"61b6310265e983001cef0c37\",",
							"                        \"name\": \"Binance Testnet\",",
							"                        \"hash\": \"0x61\"",
							"                    }",
							"                ]",
							"            ],",
							"            \"additionalItems\": true,",
							"            \"items\": {",
							"                \"$id\": \"#/properties/blockchains/items\",",
							"                \"anyOf\": [",
							"                    {",
							"                        \"$id\": \"#/properties/blockchains/items/anyOf/0\",",
							"                        \"type\": \"object\",",
							"                        \"title\": \"The first anyOf schema\",",
							"                        \"description\": \"An explanation about the purpose of this instance.\",",
							"                        \"default\": {},",
							"                        \"examples\": [",
							"                            {",
							"                                \"_id\": \"61b6310265e983001cef0c37\",",
							"                                \"name\": \"Binance Testnet\",",
							"                                \"hash\": \"0x61\"",
							"                            }",
							"                        ],",
							"                        \"required\": [",
							"                            \"_id\",",
							"                            \"name\",",
							"                            \"hash\"",
							"                        ],",
							"                        \"properties\": {",
							"                            \"_id\": {",
							"                                \"$id\": \"#/properties/blockchains/items/anyOf/0/properties/_id\",",
							"                                \"type\": \"string\",",
							"                                \"title\": \"The _id schema\",",
							"                                \"description\": \"An explanation about the purpose of this instance.\",",
							"                                \"default\": \"\",",
							"                                \"examples\": [",
							"                                    \"61b6310265e983001cef0c37\"",
							"                                ]",
							"                            },",
							"                            \"name\": {",
							"                                \"$id\": \"#/properties/blockchains/items/anyOf/0/properties/name\",",
							"                                \"type\": \"string\",",
							"                                \"title\": \"The name schema\",",
							"                                \"description\": \"An explanation about the purpose of this instance.\",",
							"                                \"default\": \"\",",
							"                                \"examples\": [",
							"                                    \"Binance Testnet\"",
							"                                ]",
							"                            },",
							"                            \"hash\": {",
							"                                \"$id\": \"#/properties/blockchains/items/anyOf/0/properties/hash\",",
							"                                \"type\": \"string\",",
							"                                \"title\": \"The hash schema\",",
							"                                \"description\": \"An explanation about the purpose of this instance.\",",
							"                                \"default\": \"\",",
							"                                \"examples\": [",
							"                                    \"0x61\"",
							"                                ]",
							"                            }",
							"                        },",
							"                        \"additionalProperties\": true",
							"                    }",
							"                ]",
							"            }",
							"        }",
							"    },",
							"    \"additionalProperties\": true",
							"})",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/blockchains",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"blockchains"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Categories",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response Code is 200\", () => {",
							"    pm.response.to.have.status(200)",
							"})",
							"",
							"pm.test(\"Schema Matches\", () => {",
							"    pm.response.to.have.jsonSchema({",
							"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
							"    \"$id\": \"http://example.com/example.json\",",
							"    \"type\": \"object\",",
							"    \"title\": \"The root schema\",",
							"    \"description\": \"The root schema comprises the entire JSON document.\",",
							"    \"default\": {},",
							"    \"examples\": [",
							"        {",
							"            \"success\": true,",
							"            \"categories\": [",
							"                {",
							"                    \"_id\": \"61b6310165e983001cef0c2f\",",
							"                    \"name\": \"Music\"",
							"                }",
							"            ]",
							"        }",
							"    ],",
							"    \"required\": [",
							"        \"success\",",
							"        \"categories\"",
							"    ],",
							"    \"properties\": {",
							"        \"success\": {",
							"            \"$id\": \"#/properties/success\",",
							"            \"type\": \"boolean\",",
							"            \"title\": \"The success schema\",",
							"            \"description\": \"An explanation about the purpose of this instance.\",",
							"            \"default\": false,",
							"            \"examples\": [",
							"                true",
							"            ]",
							"        },",
							"        \"categories\": {",
							"            \"$id\": \"#/properties/categories\",",
							"            \"type\": \"array\",",
							"            \"title\": \"The categories schema\",",
							"            \"description\": \"An explanation about the purpose of this instance.\",",
							"            \"default\": [],",
							"            \"examples\": [",
							"                [",
							"                    {",
							"                        \"_id\": \"61b6310165e983001cef0c2f\",",
							"                        \"name\": \"Music\"",
							"                    }",
							"                ]",
							"            ],",
							"            \"additionalItems\": true,",
							"            \"items\": {",
							"                \"$id\": \"#/properties/categories/items\",",
							"                \"anyOf\": [",
							"                    {",
							"                        \"$id\": \"#/properties/categories/items/anyOf/0\",",
							"                        \"type\": \"object\",",
							"                        \"title\": \"The first anyOf schema\",",
							"                        \"description\": \"An explanation about the purpose of this instance.\",",
							"                        \"default\": {},",
							"                        \"examples\": [",
							"                            {",
							"                                \"_id\": \"61b6310165e983001cef0c2f\",",
							"                                \"name\": \"Music\"",
							"                            }",
							"                        ],",
							"                        \"required\": [",
							"                            \"_id\",",
							"                            \"name\"",
							"                        ],",
							"                        \"properties\": {",
							"                            \"_id\": {",
							"                                \"$id\": \"#/properties/categories/items/anyOf/0/properties/_id\",",
							"                                \"type\": \"string\",",
							"                                \"title\": \"The _id schema\",",
							"                                \"description\": \"An explanation about the purpose of this instance.\",",
							"                                \"default\": \"\",",
							"                                \"examples\": [",
							"                                    \"61b6310165e983001cef0c2f\"",
							"                                ]",
							"                            },",
							"                            \"name\": {",
							"                                \"$id\": \"#/properties/categories/items/anyOf/0/properties/name\",",
							"                                \"type\": \"string\",",
							"                                \"title\": \"The name schema\",",
							"                                \"description\": \"An explanation about the purpose of this instance.\",",
							"                                \"default\": \"\",",
							"                                \"examples\": [",
							"                                    \"Music\"",
							"                                ]",
							"                            }",
							"                        },",
							"                        \"additionalProperties\": true",
							"                    }",
							"                ]",
							"            }",
							"        }",
							"    },",
							"    \"additionalProperties\": true",
							"})",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/categories",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"categories"
					]
				}
			},
			"response": []
		}
	]
}